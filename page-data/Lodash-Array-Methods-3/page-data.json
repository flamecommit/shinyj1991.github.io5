{"componentChunkName":"component---src-templates-post-jsx","path":"/Lodash-Array-Methods-3/","result":{"data":{"site":{"siteMetadata":{"title":"SIMPLIZM"}},"markdownRemark":{"id":"8808456b-568a-5b77-b231-8c686e0d5d9d","excerpt":"_.findIndex 조건에 맞는 첫번째 요소의 index를 반환합니다. Arguments\n- array (Array): 대상 배열\n- predicate=_.identity (Function): 반복마다 호출되는 함수\n- fromIndex=0 (number): 검색할 인덱스 Returns\n- (number): 찾은 요소의 인덱스, 없을 경우 -1 _.fi…","html":"<h2>_.findIndex</h2>\n<p>조건에 맞는 첫번째 요소의 index를 반환합니다.</p>\n<p><strong><em>Arguments</em></strong><br>\n- array (Array): 대상 배열<br>\n- [predicate=_.identity] (Function): 반복마다 호출되는 함수<br>\n- [fromIndex=0] (number): 검색할 인덱스</p>\n<p><strong><em>Returns</em></strong><br>\n- (number): 찾은 요소의 인덱스, 없을 경우 -1</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'barney'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">active</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'fred'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">active</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'pebbles'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">active</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \n_<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> o<span class=\"token punctuation\">.</span>user <span class=\"token operator\">==</span> <span class=\"token string\">'barney'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 0</span>\n \n<span class=\"token comment\">// The `_.matches` iteratee shorthand.</span>\n_<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'fred'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">active</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 1</span>\n \n<span class=\"token comment\">// The `_.matchesProperty` iteratee shorthand.</span>\n_<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 0</span>\n \n<span class=\"token comment\">// The `_.property` iteratee shorthand.</span>\n_<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 2</span></code></pre></div>\n<h2>_.findLastIndex</h2>\n<p><code class=\"language-text\">_.findIndex</code> 와 비슷하지만 이 메서드는 요소를 오른쪽에서 왼쪽으로 찾습니다.</p>\n<p><strong><em>Arguments</em></strong><br>\n- array (Array): 대상 배열<br>\n- [predicate=_.identity] (Function): 반복마다 호출되는 함수<br>\n- [fromIndex=array.length-1] (number): 검색할 인덱스</p>\n<p><strong><em>Returns</em></strong><br>\n- (number): 찾은 요소의 인덱스, 없을 경우 -1</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> barney<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">active</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> fred<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">active</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> pebbles<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">active</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \n_<span class=\"token punctuation\">.</span><span class=\"token function\">findLastIndex</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> o<span class=\"token punctuation\">.</span>user <span class=\"token operator\">==</span> <span class=\"token string\">'pebbles'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 2</span>\n \n<span class=\"token comment\">// The `_.matches` iteratee shorthand.</span>\n_<span class=\"token punctuation\">.</span><span class=\"token function\">findLastIndex</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">user</span><span class=\"token operator\">:</span> <span class=\"token string\">'barney'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">active</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 0</span>\n \n<span class=\"token comment\">// The `_.matchesProperty` iteratee shorthand.</span>\n_<span class=\"token punctuation\">.</span><span class=\"token function\">findLastIndex</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 2</span>\n \n<span class=\"token comment\">// The `_.property` iteratee shorthand.</span>\n_<span class=\"token punctuation\">.</span><span class=\"token function\">findLastIndex</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">,</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => 0</span></code></pre></div>\n<h2>_.flatten</h2>\n<p>2차원 배열을 1차원 배열로 평평하게 변환합니다.</p>\n<p><strong><em>Arguments</em></strong><br>\n- array (Array): 대상 배열</p>\n<p><strong><em>Returns</em></strong><br>\n- (Array): 결과 배열</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">_<span class=\"token punctuation\">.</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [1, 2, [3, [4]], 5]</span></code></pre></div>\n<h2>_.flattenDeep</h2>\n<p>다차원 배열을 반복적으로 평평하게 변환합니다.</p>\n<p><strong><em>Arguments</em></strong><br>\n- array (Array): 대상 배열</p>\n<p><strong><em>Returns</em></strong><br>\n- (Array): 결과 배열</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">_<span class=\"token punctuation\">.</span><span class=\"token function\">flattenDeep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [1, 2, 3, 4, 5]</span></code></pre></div>\n<h2>_.flattenDepth</h2>\n<p>다차원 배열을 재귀 깊이 만큼 평평하게 변환합니다.</p>\n<p><strong><em>Arguments</em></strong><br>\n- array (Array): 대상 배열<br>\n- [depth=1] (number): 재귀 깊이</p>\n<p><strong><em>Returns</em></strong><br>\n- (Array): 결과 배열</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n \n_<span class=\"token punctuation\">.</span><span class=\"token function\">flattenDepth</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [1, 2, [3, [4]], 5]</span>\n \n_<span class=\"token punctuation\">.</span><span class=\"token function\">flattenDepth</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// => [1, 2, 3, [4], 5]</span></code></pre></div>","frontmatter":{"title":"Lodash Array Methods 3","date":"September 26, 2022","update":"September 26, 2022","tags":["Javascript","Lodash"],"series":"Lodash Array Methods"},"fields":{"slug":"/Lodash-Array-Methods-3/","readingTime":{"minutes":2.24}}},"seriesList":{"edges":[{"node":{"id":"c848be40-0a05-5f27-8b4c-c91003591577","fields":{"slug":"/Lodash-Array-Methods-1/"},"frontmatter":{"title":"Lodash Array Methods 1"}}},{"node":{"id":"b3971968-a2d2-5a55-bea4-b6f1bf522639","fields":{"slug":"/Lodash-Array-Methods-2/"},"frontmatter":{"title":"Lodash Array Methods 2"}}},{"node":{"id":"8808456b-568a-5b77-b231-8c686e0d5d9d","fields":{"slug":"/Lodash-Array-Methods-3/"},"frontmatter":{"title":"Lodash Array Methods 3"}}}]},"previous":{"fields":{"slug":"/Lodash-Array-Methods-2/"},"frontmatter":{"title":"Lodash Array Methods 2"}},"next":{"fields":{"slug":"/Next-CSS-Transform/"},"frontmatter":{"title":"Next CSS Transform"}}},"pageContext":{"id":"8808456b-568a-5b77-b231-8c686e0d5d9d","series":"Lodash Array Methods","previousPostId":"b3971968-a2d2-5a55-bea4-b6f1bf522639","nextPostId":"59700b95-d1a5-5be4-81e5-c0c5e46af505"}},"staticQueryHashes":[]}