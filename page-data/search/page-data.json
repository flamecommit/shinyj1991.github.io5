{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"반응형이미지란? 클라이언트 환경에 따라 최적화된 이미지 리소스를 불러와 렌더링하는 이미지 또는 기술을 말합니다.  나  같은 모던 프론트 프레임워크 환경에선 각 프레임워크가 제공하는 조건부 렌더링 문법을 사용하여 반응형 이미지를 구현할 수 있으며\n코어  만을 사용하여도 큰 어려움 없이 구현할 수 있습니다. 하지만 오늘은 javascript의 도움 없이 h…","fields":{"slug":"/반응형이미지를-구현하는-두가지-방법/"},"frontmatter":{"date":"September 22, 2022","title":"반응형이미지를 구현하는 두가지 방법","tags":["CSS","html","반응형"]},"rawMarkdownBody":"\r\n## 반응형이미지란?\r\n\r\n클라이언트 환경에 따라 최적화된 이미지 리소스를 불러와 렌더링하는 이미지 또는 기술을 말합니다.\r\n\r\n`React` 나 `Vue.js` 같은 모던 프론트 프레임워크 환경에선 각 프레임워크가 제공하는 조건부 렌더링 문법을 사용하여 반응형 이미지를 구현할 수 있으며\r\n코어 `javascript` 만을 사용하여도 큰 어려움 없이 구현할 수 있습니다.\r\n\r\n하지만 오늘은 javascript의 도움 없이 html과 CSS만으로 반응형 이미지를 구현하는 두가지 방법을 다뤄보겠습니다.\r\n\r\n## picture tag\r\n\r\n첫번째 방법은 html의 `picture` 태그를 사용하는 것입니다.<br>\r\n`picture` 태그는 img 요소의 다중 이미지 리소스를 위한 컨테이너의 역할을 합니다.\r\n\r\n`source` 태그를 사용하면 각 환경에 잘 어울리는 이미지를 불러올 수 있으며<br>\r\n`img` 태그는 기본 이미지를 불러옵니다.\r\n\r\n```html\r\n<picture>\r\n  <source media=\"(max-width: 768px)\" srcset=\"./mobile.jpg\">\r\n  <img src=\"./desktop.jpg\" alt=\"device\">\r\n</picture>\r\n```\r\n\r\n## CSS content\r\n\r\n두번째 방법은 CSS의 `content` 속성을 사용하여 img 리소스를 스위칭 하는 것입니다.<br>\r\n`img` 태그에는 기본 이미지를 불러오고 CSS의 미디어쿼리로 환경에 따른 이미지 리소스를 스위칭 합니다.\r\n\r\n```html\r\n<img src=\"./desktop.jpg\" alt=\"device\">\r\n```\r\n\r\n```CSS\r\n@media screen and(max-width: 768px) {\r\n  img {\r\n    content: url(./mobile.jpg);\r\n  }\r\n}\r\n```"},{"excerpt":"React에 CSS를 적용하는 방법은 여러가지가 있습니다. 1. inline styling html태그  속성에 직접 json형태의 CSS를 할당하는 방법입니다. 같은 방법으로 CSS를 javascript 변수에 담아 사용할 수도 있습니다. 2. CSS file import 별도의 css 파일을 만들어 import 하는 방법입니다. 이 방법은 CSS적용 …","fields":{"slug":"/React에-CSS-적용하기/"},"frontmatter":{"date":"September 21, 2022","title":"React에 CSS 적용하기","tags":["React","CSS"]},"rawMarkdownBody":"\r\nReact에 CSS를 적용하는 방법은 여러가지가 있습니다.\r\n\r\n## 1. inline styling\r\n\r\n```jsx\r\nconst Example = () => {\r\n  return (\r\n    <div style={{color: 'red'}}>\r\n      <p>Text</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nhtml태그 `style` 속성에 직접 json형태의 CSS를 할당하는 방법입니다.\r\n\r\n같은 방법으로 CSS를 javascript 변수에 담아 사용할 수도 있습니다.\r\n\r\n```jsx\r\nconst Example = () => {\r\n  const styleObj = {\r\n    color: 'red'\r\n  }\r\n\r\n  return (\r\n    <div style={styleObj}>\r\n      <p>Text</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n## 2. CSS file import\r\n\r\n별도의 css 파일을 만들어 import 하는 방법입니다.\r\n\r\n```css\r\n/* Example.css */\r\n\r\n.txt {\r\n  color: red;\r\n}\r\n```\r\n\r\n```jsx\r\n// Example.jsx\r\n\r\nimport './Example.css'\r\n\r\nconst Example = () => {\r\n  return (\r\n    <div className=\"txt\">\r\n      <p>Text</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n이 방법은 CSS적용 범위가 전역이라는 점을 주의해야합니다.\r\n\r\n만약 작성한 CSS를 해당 컴포넌트에만 적용하고 싶다면<br>\r\nCSS 파일명과 확장자 사이에 `.module`을 추가해야 합니다.\r\n\r\n```css\r\n/* Example.module.css */\r\n\r\n.txt {\r\n  color: red;\r\n}\r\n```\r\n\r\n```jsx\r\n// Example.jsx\r\n\r\nimport './Example.module.css'\r\n\r\nconst Example = () => {\r\n  return (\r\n    <div className=\"txt\">\r\n      <p>Text</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n## 3. styled-components\r\n\r\nstyled-components 패키지를 설치하면 컴포넌트 내부에 CSS를 작성할 수 있습니다.<br>\r\n개인적으로 가장 추천하는 방식입니다.\r\n\r\n```cmd\r\nnpm install styled-components\r\nor\r\nyarn add styled-components\r\n```\r\n\r\n```jsx\r\nimport styled from \"styled-components\"\r\n\r\n// styled\r\nconst StyledWrapper = styled.div`\r\n  color: red;\r\n`\r\n\r\nconst Example = () => {\r\n  return (\r\n    <StyledWrapper>\r\n      <p>Text</p>\r\n    </StyledWrapper>\r\n  )\r\n}\r\n```"}]}},"pageContext":{}},"staticQueryHashes":[]}