{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"속성에 포함된 , ,  함수들이 독립적인 CSS 속성으로 분리된다고 합니다.\n각 함수들이 분리됨에 따라  을 사용한 애니메이션을 구현하기 편리해질 것으로 기대가 되네요.\n아직 100% 확정된 것은 아니지만 이미 주요 브라우저들에 적용되어있어 직접 테스트 해볼 수 있습니다.","fields":{"slug":"/Next-CSS-Transform/"},"frontmatter":{"date":"September 27, 2022","title":"Next CSS Transform","tags":["CSS"]},"rawMarkdownBody":"\r\n`transform` 속성에 포함된 `rotate`, `scale`, `translate` 함수들이 독립적인 CSS 속성으로 분리된다고 합니다.<br>\r\n각 함수들이 분리됨에 따라 `transition` 을 사용한 애니메이션을 구현하기 편리해질 것으로 기대가 되네요.<br>\r\n아직 100% 확정된 것은 아니지만 이미 주요 브라우저들에 적용되어있어 직접 테스트 해볼 수 있습니다.\r\n\r\n```css\r\n// before\r\ndiv {\r\n  transform: scale(1.2) rotate(45deg);\r\n}\r\n\r\n// after\r\ndiv {\r\n  scale: 1.2;\r\n  rotate: 45deg;\r\n}\r\n```"},{"excerpt":"_.findIndex 조건에 맞는 첫번째 요소의 index를 반환합니다. Arguments\n- array (Array): 대상 배열\n- predicate=_.identity (Function): 반복마다 호출되는 함수\n- fromIndex=0 (number): 검색할 인덱스 Returns\n- (number): 찾은 요소의 인덱스, 없을 경우 -1 _.fi…","fields":{"slug":"/Lodash-Array-Methods-3/"},"frontmatter":{"date":"September 26, 2022","title":"Lodash Array Methods 3","tags":["Javascript","Lodash"]},"rawMarkdownBody":"\r\n## _.findIndex\r\n\r\n조건에 맞는 첫번째 요소의 index를 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [predicate=_.identity] (Function): 반복마다 호출되는 함수<br>\r\n\\- [fromIndex=0] (number): 검색할 인덱스\r\n\r\n***Returns***<br>\r\n\\- (number): 찾은 요소의 인덱스, 없을 경우 -1\r\n\r\n\r\n```js\r\nvar users = [\r\n  {user: 'barney', active: false},\r\n  {user: 'fred', active: false},\r\n  {user: 'pebbles', active: true}\r\n];\r\n \r\n_.findIndex(users, function(o) {return o.user == 'barney';});\r\n// => 0\r\n \r\n// The `_.matches` iteratee shorthand.\r\n_.findIndex(users, {user: 'fred', active: false});\r\n// => 1\r\n \r\n// The `_.matchesProperty` iteratee shorthand.\r\n_.findIndex(users, ['active', false]);\r\n// => 0\r\n \r\n// The `_.property` iteratee shorthand.\r\n_.findIndex(users, 'active');\r\n// => 2\r\n```\r\n\r\n## _.findLastIndex\r\n\r\n`_.findIndex` 와 비슷하지만 이 메서드는 요소를 오른쪽에서 왼쪽으로 찾습니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [predicate=_.identity] (Function): 반복마다 호출되는 함수<br>\r\n\\- [fromIndex=array.length-1] (number): 검색할 인덱스\r\n\r\n***Returns***<br>\r\n\\- (number): 찾은 요소의 인덱스, 없을 경우 -1\r\n\r\n```js\r\nvar users = [\r\n  {user: barney, active: true},\r\n  {user: fred, active: false},\r\n  {user: pebbles, active: false}\r\n];\r\n \r\n_.findLastIndex(users, function(o) {return o.user == 'pebbles';});\r\n// => 2\r\n \r\n// The `_.matches` iteratee shorthand.\r\n_.findLastIndex(users, {user: 'barney', active: true });\r\n// => 0\r\n \r\n// The `_.matchesProperty` iteratee shorthand.\r\n_.findLastIndex(users, ['active', false]);\r\n// => 2\r\n \r\n// The `_.property` iteratee shorthand.\r\n_.findLastIndex(users, 'active');\r\n// => 0\r\n```\r\n\r\n## _.flatten\r\n\r\n2차원 배열을 1차원 배열로 평평하게 변환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\n_.flatten([1, [2, [3, [4]], 5]]);\r\n// => [1, 2, [3, [4]], 5]\r\n```\r\n\r\n## _.flattenDeep\r\n\r\n다차원 배열을 반복적으로 평평하게 변환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\n_.flattenDeep([1, [2, [3, [4]], 5]]);\r\n// => [1, 2, 3, 4, 5]\r\n```\r\n\r\n## _.flattenDepth\r\n\r\n다차원 배열을 재귀 깊이 만큼 평평하게 변환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [depth=1] (number): 재귀 깊이\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\nvar array = [1, [2, [3, [4]], 5]];\r\n \r\n_.flattenDepth(array, 1);\r\n// => [1, 2, [3, [4]], 5]\r\n \r\n_.flattenDepth(array, 2);\r\n// => [1, 2, 3, [4], 5]\r\n```"},{"excerpt":"_.drop 앞에서 부터 n개의 요소를 제거한 새 배열을 반환합니다. Arguments\n- array (Array): 대상 배열\n- n=1 (number): 삭제할 요소 수 Returns\n- (Array): 결과 배열 _.dropRight 끝에서 부터 n개의 요소를 제거한 새 배열을 반환합니다. Arguments\n- array (Array): 대상 배열\n…","fields":{"slug":"/Lodash-Array-Methods-2/"},"frontmatter":{"date":"September 23, 2022","title":"Lodash Array Methods 2","tags":["Javascript","Lodash"]},"rawMarkdownBody":"\r\n## _.drop\r\n\r\n앞에서 부터 n개의 요소를 제거한 새 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [n=1] (number): 삭제할 요소 수\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n\r\n```js\r\n_.drop([1, 2, 3]);\r\n// => [2, 3]\r\n \r\n_.drop([1, 2, 3], 2);\r\n// => [3]\r\n \r\n_.drop([1, 2, 3], 5);\r\n// => []\r\n \r\n_.drop([1, 2, 3], 0);\r\n// => [1, 2, 3]\r\n```\r\n\r\n## _.dropRight\r\n\r\n끝에서 부터 n개의 요소를 제거한 새 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [n=1] (number): 삭제할 요소 수\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\n_.dropRight([1, 2, 3]);\r\n// => [1, 2]\r\n \r\n_.dropRight([1, 2, 3], 2);\r\n// => [1]\r\n \r\n_.dropRight([1, 2, 3], 5);\r\n// => []\r\n \r\n_.dropRight([1, 2, 3], 0);\r\n// => [1, 2, 3]\r\n```\r\n\r\n## _.dropRightWhile\r\n\r\n끝에서 부터 술어가 false를 반환할 때까지 순환하면서 요소들을 삭제한 후 결과 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [predicate=identity] (Funtion): 반복마다 호출되는 함수\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\nvar users = [\r\n  { 'user': 'barney',  'active': true },\r\n  { 'user': 'fred',    'active': false },\r\n  { 'user': 'pebbles', 'active': false }\r\n];\r\n \r\n_.dropRightWhile(users, function(o) { return !o.active; });\r\n// => objects for ['barney']\r\n \r\n// The `_.matches` iteratee shorthand.\r\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\r\n// => objects for ['barney', 'fred']\r\n \r\n// The `_.matchesProperty` iteratee shorthand.\r\n_.dropRightWhile(users, ['active', false]);\r\n// => objects for ['barney']\r\n \r\n// The `_.property` iteratee shorthand.\r\n_.dropRightWhile(users, 'active');\r\n// => objects for ['barney', 'fred', 'pebbles']\r\n```\r\n\r\n## _.dropWhile\r\n\r\n앞에서 부터 술어가 false를 반환할 때까지 순환하면서 요소들을 삭제한 후 결과 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [predicate=identity] (Funtion): 반복마다 호출되는 함수\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\nvar users = [\r\n  { 'user': 'barney',  'active': false },\r\n  { 'user': 'fred',    'active': false },\r\n  { 'user': 'pebbles', 'active': true }\r\n];\r\n \r\n_.dropWhile(users, function(o) { return !o.active; });\r\n// => objects for ['pebbles']\r\n \r\n// The `_.matches` iteratee shorthand.\r\n_.dropWhile(users, { 'user': 'barney', 'active': false });\r\n// => objects for ['fred', 'pebbles']\r\n \r\n// The `_.matchesProperty` iteratee shorthand.\r\n_.dropWhile(users, ['active', false]);\r\n// => objects for ['pebbles']\r\n \r\n// The `_.property` iteratee shorthand.\r\n_.dropWhile(users, 'active');\r\n// => objects for ['barney', 'fred', 'pebbles']\r\n```\r\n\r\n## _.fill\r\n\r\n배열 요소를 시작부터 끝까지 값을 채웁니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- value (*): 배열을 채울 요소<br>\r\n\\- [start=0] (number): 시작 위치<br>\r\n\\- [end=array.length] (number): 종료 위치\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\nvar array = [1, 2, 3];\r\n \r\n_.fill(array, 'a');\r\nconsole.log(array);\r\n// => ['a', 'a', 'a']\r\n \r\n_.fill(Array(3), 2);\r\n// => [2, 2, 2]\r\n \r\n_.fill([4, 6, 8, 10], '*', 1, 3);\r\n// => [4, '*', '*', 10]\r\n```"},{"excerpt":"_.chunk 매개변수 길이만큼 그룹으로 분할된 배열을 만듭니다.\n배열을 균등하게 분할할 수 없는 경우 남은 요소들로 마지막 배열을 반환합니다. Arguments\n- array (Array): 대상 배열\n- size=1 (number): 분할 길이 Returns\n- (Array): 분할된 배열 _.compact 잘못된 값이 모두 제거된 배열을 반환합니다.…","fields":{"slug":"/Lodash-Array-Methods-1/"},"frontmatter":{"date":"September 22, 2022","title":"Lodash Array Methods 1","tags":["Javascript","Lodash"]},"rawMarkdownBody":"\r\n## _.chunk\r\n\r\n매개변수 길이만큼 그룹으로 분할된 배열을 만듭니다.<br>\r\n배열을 균등하게 분할할 수 없는 경우 남은 요소들로 마지막 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [size=1] (number): 분할 길이\r\n\r\n***Returns***<br>\r\n\\- (Array): 분할된 배열\r\n\r\n\r\n```js\r\n_.chunk(['a', 'b', 'c', 'd'], 2);\r\n// => [['a', 'b'], ['c', 'd']]\r\n \r\n_.chunk(['a', 'b', 'c', 'd'], 3);\r\n// => [['a', 'b', 'c'], ['d']]\r\n```\r\n\r\n## _.compact\r\n\r\n잘못된 값이 모두 제거된 배열을 반환합니다.<br>\r\n`false`, `null`, `0`, `\"\"`, `undefined` 그리고 `NaN`은 제거됩니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열\r\n\r\n***Returns***<br>\r\n\\- (Array): 필터링 된 값의 새 배열\r\n\r\n```js\r\n_.compact([0, 1, false, 2, '', 3]);\r\n// => [1, 2, 3]\r\n```\r\n\r\n## _.concat\r\n\r\n대상 배열에 배열 또는 값을 연결하여 새 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [values] (...*): 연결할 배열 또는 값\r\n\r\n***Returns***<br>\r\n\\- (Array): 연결된 새 배열\r\n\r\n```js\r\nvar array = [1];\r\nvar other = _.concat(array, 2, [3], [[4]]);\r\n \r\nconsole.log(other);\r\n// => [1, 2, 3, [4]]\r\n \r\nconsole.log(array);\r\n// => [1]\r\n```\r\n\r\n## _.difference\r\n\r\n두 배열을 받아 동일성 비교를 하여 앞의 배열에서 뒤의 배열과 다른 요소들을 모아 새 배열을 반환합니다. 결과값의 순서 및 참조는 제1 배열에 의해 결정됩니다.\r\n\r\n참고 : `_.pullAll`과 달리 이 메서드는 새 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 검사할 배열<br>\r\n\\- [values] (...Array): 제외할 배열\r\n\r\n***Returns***<br>\r\n\\- (Array): 필터링 된 값의 새 배열\r\n\r\n```js\r\n_.difference([2, 1], [2, 3]);\r\n// => [1]\r\n```\r\n\r\n## _.differenceBy\r\n\r\ndifference에서 추가로 대상 배열의 순회 함수를 인자로 받는다.<br>\r\n대상 배열들은 함수에 의해 한번 순회를 거친후 비교된다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 검사할 배열<br>\r\n\\- [values] (...Array): 제외할 배열<br>\r\n\\- [comparator] (Function): 순회 함수\r\n\r\n***Returns***<br>\r\n\\- (Array): 필터링 된 값의 새 배열\r\n\r\n```js\r\n_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\r\n// => 1.2\r\n```\r\n\r\n```js\r\nconst members = [\r\n  {id: 1, name: '김철수',},\r\n  {id: 2, name: '박철수',},\r\n  {id: 3, name: '이철수',}\r\n];\r\n\r\n_.differenceBy(members, [\r\n  {id: 1, name: '김봉남'},\r\n  {id: 4, name: '이철수'}\r\n], member => member.id);\r\n\r\n/* => [\r\n  {id: 2, name: '박철수',},\r\n  {id: 3, name: '이철수',}\r\n] */\r\n```\r\n\r\n## _.differenceWith\r\n\r\ndifference에서 추가로 대상 배열의 비교 함수를 인자로 받는다.<br>\r\n비교 함수로 대상 배열들의 동일성 여부를 판별한다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 검사할 배열<br>\r\n\\- [values] (...Array): 제외할 배열<br>\r\n\\- [comparator] (Function): 비교 함수\r\n\r\n***Returns***<br>\r\n\\- (Array): 필터링 된 값의 새 배열\r\n\r\n```js\r\n_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\r\n// => 1.2\r\n```\r\n\r\n```js\r\nconst members = [\r\n  {id: 1, name: '김철수',},\r\n  {id: 2, name: '박철수',},\r\n  {id: 3, name: '이철수',}\r\n];\r\n\r\n_.differenceWith(members, [\r\n  {id: 1, name: '김봉남'},\r\n  {id: 4, name: '이철수'}\r\n], (a, b) => a.name === b.name);\r\n\r\n/* => [\r\n  {id: 1, name: '김철수',},\r\n  {id: 2, name: '박철수',}\r\n] */\r\n```\r\n"},{"excerpt":"반응형이미지란? 클라이언트 환경에 따라 최적화된 이미지 리소스를 불러와 렌더링하는 이미지 또는 기술을 말합니다.  나  같은 모던 프론트 프레임워크 환경에선 각 프레임워크가 제공하는 조건부 렌더링 문법을 사용하여 반응형 이미지를 구현할 수 있으며\n코어  만을 사용하여도 큰 어려움 없이 구현할 수 있습니다. 하지만 오늘은 javascript의 도움 없이 h…","fields":{"slug":"/반응형이미지를-구현하는-두가지-방법/"},"frontmatter":{"date":"September 21, 2022","title":"반응형이미지를 구현하는 두가지 방법","tags":["CSS","html","반응형","이미지"]},"rawMarkdownBody":"\r\n## 반응형이미지란?\r\n\r\n클라이언트 환경에 따라 최적화된 이미지 리소스를 불러와 렌더링하는 이미지 또는 기술을 말합니다.\r\n\r\n`React` 나 `Vue.js` 같은 모던 프론트 프레임워크 환경에선 각 프레임워크가 제공하는 조건부 렌더링 문법을 사용하여 반응형 이미지를 구현할 수 있으며\r\n코어 `javascript` 만을 사용하여도 큰 어려움 없이 구현할 수 있습니다.\r\n\r\n하지만 오늘은 javascript의 도움 없이 html과 CSS만으로 반응형 이미지를 구현하는 두가지 방법을 다뤄보겠습니다.\r\n\r\n## picture tag\r\n\r\n첫번째 방법은 html의 `picture` 태그를 사용하는 것입니다.<br>\r\n`picture` 태그는 img 요소의 다중 이미지 리소스를 위한 컨테이너의 역할을 합니다.\r\n\r\n`source` 태그를 사용하면 각 환경에 잘 어울리는 이미지를 불러올 수 있으며<br>\r\n`img` 태그는 기본 이미지를 불러옵니다.\r\n\r\n```html\r\n<picture>\r\n  <source media=\"(max-width: 768px)\" srcset=\"./mobile.jpg\">\r\n  <img src=\"./desktop.jpg\" alt=\"device\">\r\n</picture>\r\n```\r\n\r\n## CSS content\r\n\r\n두번째 방법은 CSS의 `content` 속성을 사용하여 img 리소스를 스위칭 하는 것입니다.<br>\r\n`img` 태그에는 기본 이미지를 불러오고 CSS의 미디어쿼리로 환경에 따른 이미지 리소스를 스위칭 합니다.\r\n\r\n```html\r\n<img src=\"./desktop.jpg\" alt=\"device\">\r\n```\r\n\r\n```CSS\r\n@media screen and(max-width: 768px) {\r\n  img {\r\n    content: url(./mobile.jpg);\r\n  }\r\n}\r\n```"},{"excerpt":"React에 CSS를 적용하는 방법은 여러가지가 있습니다. 1. inline styling html태그  속성에 직접 json형태의 CSS를 할당하는 방법입니다. 같은 방법으로 CSS를 javascript 변수에 담아 사용할 수도 있습니다. 2. CSS file import 별도의 css 파일을 만들어 import 하는 방법입니다. 이 방법은 CSS적용 …","fields":{"slug":"/React에-CSS-적용하기/"},"frontmatter":{"date":"September 20, 2022","title":"React에 CSS 적용하기","tags":["React","CSS"]},"rawMarkdownBody":"\r\nReact에 CSS를 적용하는 방법은 여러가지가 있습니다.\r\n\r\n## 1. inline styling\r\n\r\n```jsx\r\nconst Example = () => {\r\n  return (\r\n    <div style={{color: 'red'}}>\r\n      <p>Text</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nhtml태그 `style` 속성에 직접 json형태의 CSS를 할당하는 방법입니다.\r\n\r\n같은 방법으로 CSS를 javascript 변수에 담아 사용할 수도 있습니다.\r\n\r\n```jsx\r\nconst Example = () => {\r\n  const styleObj = {\r\n    color: 'red'\r\n  }\r\n\r\n  return (\r\n    <div style={styleObj}>\r\n      <p>Text</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n## 2. CSS file import\r\n\r\n별도의 css 파일을 만들어 import 하는 방법입니다.\r\n\r\n```css\r\n/* Example.css */\r\n\r\n.txt {\r\n  color: red;\r\n}\r\n```\r\n\r\n```jsx\r\n// Example.jsx\r\n\r\nimport './Example.css'\r\n\r\nconst Example = () => {\r\n  return (\r\n    <div className=\"txt\">\r\n      <p>Text</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n이 방법은 CSS적용 범위가 전역이라는 점을 주의해야합니다.\r\n\r\n만약 작성한 CSS를 해당 컴포넌트에만 적용하고 싶다면<br>\r\nCSS 파일명과 확장자 사이에 `.module`을 추가해야 합니다.\r\n\r\n```css\r\n/* Example.module.css */\r\n\r\n.txt {\r\n  color: red;\r\n}\r\n```\r\n\r\n```jsx\r\n// Example.jsx\r\n\r\nimport './Example.module.css'\r\n\r\nconst Example = () => {\r\n  return (\r\n    <div className=\"txt\">\r\n      <p>Text</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n## 3. styled-components\r\n\r\nstyled-components 패키지를 설치하면 컴포넌트 내부에 CSS를 작성할 수 있습니다.<br>\r\n개인적으로 가장 추천하는 방식입니다.\r\n\r\n```cmd\r\nnpm install styled-components\r\nor\r\nyarn add styled-components\r\n```\r\n\r\n```jsx\r\nimport styled from \"styled-components\"\r\n\r\n// styled\r\nconst StyledWrapper = styled.div`\r\n  color: red;\r\n`\r\n\r\nconst Example = () => {\r\n  return (\r\n    <StyledWrapper>\r\n      <p>Text</p>\r\n    </StyledWrapper>\r\n  )\r\n}\r\n```"}]}},"pageContext":{}},"staticQueryHashes":[]}