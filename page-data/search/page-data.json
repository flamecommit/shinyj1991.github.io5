{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"회사에서 새로 런칭하는 게임의 티저 성격의 단일 페이지 웹을 제작하게 되었는데요 얼마전 정식 릴리즈된 Nuxt3를 사용하면서 겪었던 시행착오를 정리해 보았습니다. 기존에 사용하던 Nuxt2 과 사용방법이 여기저기 변화했지만 공식문서에 정리가 잘 되어있어 작업자체는 크게 어렵지 않았습니다. 기억나는 변경사항으로는  파일의 옵션에서 와 가 로 통합되었다는 것…","fields":{"slug":"/ios에서-mp4파일이-재생이-안될때/"},"frontmatter":{"date":"December 22, 2022","title":"Nuxt3 Service 배포 삽질 기록","tags":["nuxt","nuxt3","deploy"]},"rawMarkdownBody":"\r\n회사에서 새로 런칭하는 게임의 티저 성격의 단일 페이지 웹을 제작하게 되었는데요\r\n\r\n얼마전 정식 릴리즈된 Nuxt3를 사용하면서 겪었던 시행착오를 정리해 보았습니다.\r\n\r\n기존에 사용하던 Nuxt2 과 사용방법이 여기저기 변화했지만 공식문서에 정리가 잘 되어있어 작업자체는 크게 어렵지 않았습니다.\r\n\r\n기억나는 변경사항으로는 `nuxt.config.js` 파일의 옵션에서 `modules`와 `buildModules`가 `modules`로 통합되었다는 것과\r\n\r\n`plugins` 디렉토리에 있는 `js` 또는 `ts` 파일을 `nuxt.config.js` 에서 호출하지 않아도 자동으로 실행해주는 것이었습니다.\r\n\r\n전체적으로 Nuxt2 보다 확실히 개발 편의성이 높아졌다고 생각합니다.\r\n\r\n여차저차 공식문서와 구글링을 통해 개발을 마무리 하고 배포 단계에 도달했습니다.\r\n\r\nNuxt의 번들링은 `build` 와 `generate` 두 종류가 있는데요\r\n\r\n`build`는 ssr 을 포함한 정규 빌드 방식이고 `generate` 는 정적 웹사이트라고 보시면 됩니다.\r\n\r\n제가 이번에 투입된 프로젝트는 별도의 http 통신이 없는 단순 정보제공 성격의 티저사이트 이기 때문에 `generate` 로 배포하기로 결정했습니다.\r\n\r\n하지만 generate로 만들어진 결과물 사이트를 서버에 배포해 보니 개발환경과 미세한 차이점들이 발생했습니다. (error 페이지 렌더링 등등)\r\n\r\n아마 모든 프레임워크가 그렇듯 Nuxt3도 처음 릴리즈(현재 버전 3.0.0)된 버전이기 때문에 이런 오류가 발생하는건 어쩔수 없다고 생각합니다. (이래서 프레임워크는 검증기간을 거친 후 실제서비스에 적용해야 합니다.)\r\n\r\n그래서 정적웹사이트에서 정규 빌드 후 서버에서 실행시키는 방향으로 배포방식을 변경하기로 마음먹었습니다.\r\n\r\nNuxt3에서는 작업물을 `build` 한 다음에 `node .output/server/index.mjs` 명령어를 통해 실행시켜야 합니다.\r\n\r\n하지만 이렇게 실행하게 되면 추후 사이트를 수정할 일이 생겨 작업 후 재배포 했을때, 배포하는 동안 서비스가 내려가는 문제가 발생합니다.\r\n\r\n이를 방지하기 위해서 사용하는 모듈이 바로 `pm2`의 클러스터 모드입니다.\r\n\r\n`pm2`를 사용하기 위해선 프로젝트 root 경로에 `ecosystem.config.js` 파일을 생성해 주어야 하고\r\n\r\n```js\r\n// ecosystem.config.js\r\nmodule.exports = {\r\n  apps: [\r\n    {\r\n      name: 'NightCrows',\r\n      exec_mode: 'cluster',\r\n      instances: process.env.NODE_ENV === 'prod' ? 'max' : 1,\r\n      script: './.output/server/index.mjs',\r\n      env_alpha: {\r\n        HOST: '0.0.0.0',\r\n        PORT: 6141,\r\n        NODE_ENV: 'alpha',\r\n      },\r\n    },\r\n  ],\r\n}\r\n```\r\n\r\n서버에는 글로벌 옵션으로 pm2를 설치해 주어야 합니다.\r\n\r\n`sudo npm install -g pm2`\r\n\r\n이후의 작업은 다음에 다시 정리하도록 하겠습니다."},{"excerpt":"이번에 맡게된 프로젝트에서 중복신청 체크를 위해 본인확인서비스를 적용하게 되었습니다. 그 과정과 시행착오들을 간략하게 정리해보았습니다. 철저히 프론트엔드에 관한 내용만 정리했으니 참고 부탁드립니다. ※ 한국모바일인증과 본인확인서비스 계약을 하게되면 가이드문서를 제공받을 수 있습니다. 본인인증 팝업 띄우기  이렇게 생긴 팝업을 띄우기 위해선  을 사용하여 …","fields":{"slug":"/vue3-본인확인서비스-붙이기/"},"frontmatter":{"date":"October 13, 2022","title":"vue3 본인확인서비스 붙이기","tags":["Vue"]},"rawMarkdownBody":"\r\n이번에 맡게된 프로젝트에서 중복신청 체크를 위해 본인확인서비스를 적용하게 되었습니다.\r\n\r\n그 과정과 시행착오들을 간략하게 정리해보았습니다.\r\n\r\n철저히 프론트엔드에 관한 내용만 정리했으니 참고 부탁드립니다.\r\n\r\n※ 한국모바일인증과 본인확인서비스 계약을 하게되면 가이드문서를 제공받을 수 있습니다.\r\n\r\n### 본인인증 팝업 띄우기\r\n\r\n![본인인증 팝업](popup.png)\r\n\r\n이렇게 생긴 팝업을 띄우기 위해선 `form` 을 사용하여 `post` 로 데이터를 전송해야 합니다.\r\n\r\n```html\r\n<script setup>\r\nimport { reactive } from 'vue'\r\nimport { useSomeStore } from '@/stores/some'\r\n\r\nconst someStore = useSomeStore();\r\n\r\nconst state = reactive({\r\n  KMCIS_window: null,\r\n  kmcis: {\r\n    cert: '',\r\n    url: '',\r\n    add: '',\r\n  },\r\n  callbackUrl: '/callback'\r\n});\r\n\r\nasync function setting() {\r\n  state.KMCIS_window = window.open(\r\n    state.callbackUrl,\r\n    'KMCISWindow',\r\n    'width=397, height=693, resizable=0, scrollbars=no, status=0, titlebar=0, toolbar=0, left=435, top=250',\r\n  );\r\n\r\n  if (state.KMCIS_window == null) {\r\n    alert(\r\n      `※ 윈도우 XP SP2 또는 인터넷 익스플로러 7 사용자일 경우에는\\n\r\n      화면 상단에 있는 팝업 차단 알림줄을 클릭하여 팝업을 허용해 주시기 바랍니다.\\n\\n\r\n      ※ MSN,야후,구글 팝업 차단 툴바가 설치된 경우 팝업허용을 해주시기 바랍니다.`\r\n    );\r\n  }\r\n\r\n  const code = await someStore.getCertificateData(); // 본인인증 암호문 (백엔드에서 작업)\r\n\r\n  state.kmcis.cert = code;\r\n  state.kmcis.url = `${window.location.protocol}//${window.location.host}${state.callbackUrl}`; // 서비스 결과 수신 URL\r\n  state.kmcis.add = 'Y'; // popup = Y, iframe = N\r\n\r\n  document.reqKMCISForm.target = 'KMCISWindow';\r\n\r\n  window.call = async function(data) {\r\n    console.log('success', data)\r\n  };\r\n}\r\n\r\nasync function authorization() {\r\n  await setting();\r\n  setTimeout(() => {\r\n    document.reqKMCISForm.submit();\r\n  }, 100);\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class=\"authorization-area\">\r\n    <form name=\"reqKMCISForm\" id=\"reqKMCISForm\" method=\"post\" action=\"https://www.kmcert.com/kmcis/web/kmcisReq.jsp\">\r\n      <input type=\"hidden\" name=\"tr_cert\" v-model=\"state.kmcis.cert\" />\r\n      <input type=\"hidden\" name=\"tr_url\" v-model=\"state.kmcis.url\" />\r\n      <input type=\"hidden\" name=\"tr_add\" v-model=\"state.kmcis.add\" />\r\n    </form>\r\n    <button type=\"button\" @click=\"authorization\">인증하기</button>\r\n  </div>\r\n</template>\r\n```\r\n\r\n### 결과 페이지\r\n\r\n팝업 띄우기에 성공했다면 결과페이지를 만들어 줍니다.\r\n\r\n```html\r\n<script setup>\r\nimport { onMounted } from 'vue'\r\nimport { useRoute } from 'vue-router';\r\nimport { useSomeStore } from '@/stores/some'\r\nimport qs from 'qs';\r\n\r\nconst someStore = useSomeStore();\r\nconst route = useRoute();\r\nconst query = qs.parse(route.query);\r\n\r\nonMounted(async () => {\r\n  if (query.rec_cert) {\r\n    const result = await someStore.getCetificateResult({\r\n      certNum: query.certNum,\r\n      recCert: query.rec_cert\r\n    })\r\n\r\n    opener.call(true);\r\n    window.close();\r\n  }\r\n});\r\n</script>\r\n  \r\n<template>\r\n  <div class=\"page-callback\">\r\n    <p>Callback</p>\r\n  </div>\r\n</template>\r\n```\r\n\r\n만약 결과페이지에서 405 error가 난다던가 query가 빈값으로 내려온다면 결과 메소드가 `post`는 아닌지 의심해 봐야합니다.\r\n만약 `post`로 받고 있다면 업체 고객센터에 전화해서 `get`방식으로 바꿔달라고 요청합니다.\r\n개발자가 바꿀 수 없어요,, 저는 이것때문에 반나절동안 고생했습니다."},{"excerpt":"_.nth 배열의 인덱스 n에 있는 요소를 가져옵니다. n이 음수라면 끝에서 부터 n번째 요소를 가져옵니다. Arguments\n- array (Array): 대상 배열 Returns\n- n=0 (number): 반환할 요소의 인덱스 _.pull 배열에서 지정된 모든 값을 제거합니다. 참고 : 과 달리 이 메서드는 배열을 변경합니다. Arguments\n- …","fields":{"slug":"/Lodash-Array-Methods-5/"},"frontmatter":{"date":"October 04, 2022","title":"Lodash Array Methods 5","tags":["Javascript","Lodash"]},"rawMarkdownBody":"\r\n## _.nth\r\n\r\n배열의 인덱스 n에 있는 요소를 가져옵니다. n이 음수라면 끝에서 부터 n번째 요소를 가져옵니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열\r\n\r\n***Returns***<br>\r\n\\- [n=0] (number): 반환할 요소의 인덱스\r\n\r\n\r\n```js\r\nvar array = ['a', 'b', 'c', 'd'];\r\n \r\n_.nth(array, 1);\r\n// => 'b'\r\n \r\n_.nth(array, -2);\r\n// => 'c';\r\n```\r\n\r\n## _.pull\r\n\r\n배열에서 지정된 모든 값을 제거합니다.\r\n\r\n참고 : `_.without`과 달리 이 메서드는 배열을 변경합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [values] (...*): 제거할 값\r\n\r\n***Returns***<br>\r\n\\- (Array): 반환 배열\r\n\r\n```js\r\nvar array = ['a', 'b', 'c', 'a', 'b', 'c'];\r\n \r\n_.pull(array, 'a', 'c');\r\nconsole.log(array);\r\n// => ['b', 'b']\r\n```\r\n\r\n## _.pullAll\r\n\r\n제거할 값에 배열을 수락한다는 점을 제외하고 `_.pull` 과 같습니다.\r\n\r\n참고 : `_.difference` 와 달리 이 메서드는 배열을 변경합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- values (Array): 제거할 값\r\n\r\n***Returns***<br>\r\n\\- (Array): 반환 배열\r\n\r\n```js\r\nvar array = ['a', 'b', 'c', 'a', 'b', 'c'];\r\n \r\n_.pullAll(array, ['a', 'c']);\r\nconsole.log(array);\r\n// => ['b', 'b']\r\n```\r\n\r\n## _.pullAllBy\r\n\r\n배열 및 값의 각 요소에 대해 호출되는 반복을 하용하여 비교 기준을 생성한다는 점을 제외하면 `_.pullAll` 과 같습니다. 반복자는 하나의 인수(값)로 호출됩니다.\r\n\r\n참고 : `_.differenceBy` 와 달리 이 메서드는 배열을 변경합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- values (Array): 제거할 값<br>\r\n\\- [iteratee=_.identity] (Function): 반복마다 호출되는 비교 함수\r\n\r\n***Returns***<br>\r\n\\- (Array): 반환 배열\r\n\r\n```js\r\nvar array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];\r\n \r\n_.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');\r\nconsole.log(array);\r\n// => [{ 'x': 2 }]\r\n```\r\n\r\n\r\n## _.remove\r\n\r\n술어를 사용하는 모든 요소를 배열에서 제거하고 제거된 요소의 배열을 반환합니다. 술어는(값, 인덱스, 배열)의 세 가지 인수로 호출됩니다.\r\n\r\n참고 : `_.filter` 와 달리 이 메서드는 배열을 변환합니다. `_.pull` 을 사용하여 값을 기준으로 배열에서 요소를 가져옵니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [iteratee=_.identity] (Function): 반복마다 호출되는 함수\r\n\r\n***Returns***<br>\r\n\\- (Array): 제거된 요소들의 새 배열\r\n\r\n```js\r\nvar array = [1, 2, 3, 4];\r\nvar evens = _.remove(array, function(n) {\r\n  return n % 2 == 0;\r\n});\r\n \r\nconsole.log(array);\r\n// => [1, 3]\r\n \r\nconsole.log(evens);\r\n// => [2, 4]\r\n```\r\n\r\n## _.reverse\r\n\r\n배열의 요소들을 반전시킵니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\nvar array = [1, 2, 3];\r\n \r\n_.reverse(array);\r\n// => [3, 2, 1]\r\n \r\nconsole.log(array);\r\n// => [3, 2, 1]\r\n```"},{"excerpt":"_.fromPairs 키-값 쌍으로 구성된 객체를 반환합니다. Arguments\n- pairs (Array): The key-value pairs. Returns\n- (Object): Returns the new object. _.head 배열의 첫 번째 요소를 반환합니다. Arguments\n- array (Array): 대상 배열 Returns\n- (O…","fields":{"slug":"/Lodash-Array-Methods-4/"},"frontmatter":{"date":"September 29, 2022","title":"Lodash Array Methods 4","tags":["Javascript","Lodash"]},"rawMarkdownBody":"\r\n## _.fromPairs\r\n\r\n키-값 쌍으로 구성된 객체를 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- pairs (Array): The key-value pairs.\r\n\r\n***Returns***<br>\r\n\\- (Object): Returns the new object.\r\n\r\n\r\n```js\r\n_.fromPairs([['a', 1], ['b', 2]]);\r\n// => { 'a': 1, 'b': 2 }\r\n```\r\n\r\n## _.head\r\n\r\n배열의 첫 번째 요소를 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열\r\n\r\n***Returns***<br>\r\n\\- (Object): 대상 배열의 첫 번째 요소\r\n\r\n```js\r\n_.head([1, 2, 3]);\r\n// => 1\r\n \r\n_.head([]);\r\n// => undefined\r\n```\r\n\r\n## _.indexOf\r\n\r\n배열에서 동일성 비교 후 첫번째 요소의 인덱스를 가져오고 동일값이 없을 경우 -1을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- value (*): 검색 값<br>\r\n\\- [fromIndex=0] (number): 검색 시작 위치\r\n\r\n***Returns***<br>\r\n\\- (Object): 일치하는 값의 인덱스, 없을 경우 -1\r\n\r\n```js\r\n_.indexOf([1, 2, 1, 2], 2);\r\n// => 1\r\n \r\n// Search from the `fromIndex`.\r\n_.indexOf([1, 2, 1, 2], 2, 2);\r\n// => 3\r\n```\r\n\r\n## _.initial\r\n\r\n배열의 마지막 요소를 제외한 모든 요소를 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열\r\n\r\n***Returns***<br>\r\n\\- (Object): 결과 배열\r\n\r\n```js\r\n_.initial([1, 2, 3]);\r\n// => [1, 2]\r\n```\r\n\r\n## _.join\r\n\r\n배열의 모든 요소를 구분자로 구분된 문자열로 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [separator=','] (string): 구분자\r\n\r\n***Returns***<br>\r\n\\- (Object): 결과 문자열\r\n\r\n```js\r\n_.join(['a', 'b', 'c'], '~');\r\n// => 'a~b~c'\r\n```\r\n\r\n## _.last\r\n\r\n배열의 마지막 요소를 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열\r\n\r\n***Returns***<br>\r\n\\- (Object): 대상 배열의 마지막 요소\r\n\r\n```js\r\n_.last([1, 2, 3]);\r\n// => 3\r\n```\r\n\r\n## _.lastIndexOf\r\n\r\n마지막 요소부터 비교한다는것을 제외하면 `_.indexOf` 와 동일합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- value (*): 검색 값<br>\r\n\\- [fromIndex=array.length-1] (number): 검색 시작 위치\r\n\r\n***Returns***<br>\r\n\\- (Object): 일치하는 값의 인덱스, 없을 경우 -1\r\n\r\n```js\r\n_.lastIndexOf([1, 2, 1, 2], 2);\r\n// => 3\r\n \r\n// Search from the `fromIndex`.\r\n_.lastIndexOf([1, 2, 1, 2], 2, 2);\r\n// => 1\r\n```"},{"excerpt":"회사에서 신규로 진행하는 프로젝트에 다국어를 대응해 달라는 요청이 있었습니다.\n 이라는 모듈을 사용하면  프로젝트에 다국어 서비스를 지원할 수 있는데요\n오늘은  환경에서  모듈을 설치부터 적용하는 법까지 정리해보았습니다. 설치 Vue3에서 사용하기 위해선 9버전 이상의 vue-i18n 모듈을 설치해야 합니다. 셋팅 설치가 끝나면  파일에서  을 추가해줍니…","fields":{"slug":"/vue3-프로젝트에-vue-i18n-적용하기/"},"frontmatter":{"date":"September 28, 2022","title":"vue3 프로젝트에 vue-i18n 적용하기","tags":["Vue"]},"rawMarkdownBody":"\r\n회사에서 신규로 진행하는 프로젝트에 다국어를 대응해 달라는 요청이 있었습니다.<br>\r\n`vue-i18n` 이라는 모듈을 사용하면 `vue.js` 프로젝트에 다국어 서비스를 지원할 수 있는데요<br>\r\n오늘은 `vue3` 환경에서 `vue-i18n` 모듈을 설치부터 적용하는 법까지 정리해보았습니다.\r\n\r\n\r\n### 설치\r\n\r\nVue3에서 사용하기 위해선 9버전 이상의 vue-i18n 모듈을 설치해야 합니다.\r\n\r\n```\r\nnpm install vue-i18n\r\n\r\nor\r\n\r\nyarn add vue-i18n\r\n```\r\n\r\n### 셋팅\r\n\r\n설치가 끝나면 `main.js` 파일에서 `vue-i18n` 을 추가해줍니다.\r\n\r\n```js\r\n/* src/main.js */\r\n\r\nimport { createApp } from 'vue'\r\nimport { createI18n } from 'vue-i18n'\r\n\r\nimport en from './langs/en.json'\r\nimport ko from './langs/ko.json'\r\n\r\nconst vueApp = createApp(App)\r\n\r\nconst i18n = createI18n({\r\n  legacy: false, // composition api 를 사용하려면 false\r\n  locale: 'ko', // 사용 언어\r\n  fallbackLocale: 'en', // 요청한 언어가 없을 때 대체할 언어\r\n  messages: { en, ko }\r\n})\r\n\r\nvueApp.use(i18n)\r\n\r\nvueApp.mount('#app')\r\n```\r\n\r\n```json\r\n/* src/langs/ko.json */\r\n{\r\n  \"button\": {\r\n    \"add\": \"추가\",\r\n    \"delete\": \"삭제\"\r\n  }\r\n}\r\n\r\n/* src/langs/en.json */\r\n{\r\n  \"button\": {\r\n    \"add\": \"Add\",\r\n    \"delete\": \"Delete\"\r\n  }\r\n}\r\n```\r\n\r\n### 적용\r\n\r\n```html\r\n<script setup>\r\nimport { reactive } from 'vue'\r\nimport { useI18n } from 'vue-i18n'\r\n\r\nconst { t } = useI18n()\r\n\r\nconst state = reactive({\r\n  langs: ['ko', 'en']\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <p>{{ t('button.add') }}</p>\r\n\r\n    <select v-model=\"$i18n.locale\">\r\n      <option v-for=\"(lang, i) in state.langs\" :key=\"`Lang${i}`\" :value=\"lang\">\r\n        {{ lang }}\r\n      </option>\r\n    </select>\r\n  </div>\r\n</template>\r\n```\r\n\r\n### version\r\n\r\n```json\r\n{\r\n  \"dependencies\": {\r\n    \"vue\": \"^3.2.37\",\r\n    \"vue-i18n\": \"^9.2.2\",\r\n  }\r\n}\r\n```"},{"excerpt":"속성에 포함된 , ,  함수들이 독립적인 CSS 속성으로 분리된다고 합니다.\n각 함수들이 분리됨에 따라  을 사용한 애니메이션을 구현하기 편리해질 것으로 기대가 되네요. 적용 전에 아래 지원 브라우저를 참고하시기 바랍니다.","fields":{"slug":"/Next-CSS-Transform/"},"frontmatter":{"date":"September 27, 2022","title":"Next CSS Transform","tags":["CSS"]},"rawMarkdownBody":"\r\n`transform` 속성에 포함된 `rotate`, `scale`, `translate` 함수들이 독립적인 CSS 속성으로 분리된다고 합니다.<br>\r\n각 함수들이 분리됨에 따라 `transition` 을 사용한 애니메이션을 구현하기 편리해질 것으로 기대가 되네요.\r\n\r\n```scss\r\n// before\r\ndiv {\r\n  transform: scale(1.2) rotate(45deg);\r\n}\r\n\r\n// after\r\ndiv {\r\n  scale: 1.2;\r\n  rotate: 45deg;\r\n}\r\n```\r\n\r\n적용 전에 아래 지원 브라우저를 참고하시기 바랍니다.\r\n\r\n![](caniuse.png)"},{"excerpt":"_.findIndex 조건에 맞는 첫번째 요소의 index를 반환합니다. Arguments\n- array (Array): 대상 배열\n- predicate=_.identity (Function): 반복마다 호출되는 함수\n- fromIndex=0 (number): 검색할 인덱스 Returns\n- (number): 찾은 요소의 인덱스, 없을 경우 -1 _.fi…","fields":{"slug":"/Lodash-Array-Methods-3/"},"frontmatter":{"date":"September 26, 2022","title":"Lodash Array Methods 3","tags":["Javascript","Lodash"]},"rawMarkdownBody":"\r\n## _.findIndex\r\n\r\n조건에 맞는 첫번째 요소의 index를 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [predicate=_.identity] (Function): 반복마다 호출되는 함수<br>\r\n\\- [fromIndex=0] (number): 검색할 인덱스\r\n\r\n***Returns***<br>\r\n\\- (number): 찾은 요소의 인덱스, 없을 경우 -1\r\n\r\n\r\n```js\r\nvar users = [\r\n  {user: 'barney', active: false},\r\n  {user: 'fred', active: false},\r\n  {user: 'pebbles', active: true}\r\n];\r\n \r\n_.findIndex(users, function(o) {return o.user == 'barney';});\r\n// => 0\r\n \r\n// The `_.matches` iteratee shorthand.\r\n_.findIndex(users, {user: 'fred', active: false});\r\n// => 1\r\n \r\n// The `_.matchesProperty` iteratee shorthand.\r\n_.findIndex(users, ['active', false]);\r\n// => 0\r\n \r\n// The `_.property` iteratee shorthand.\r\n_.findIndex(users, 'active');\r\n// => 2\r\n```\r\n\r\n## _.findLastIndex\r\n\r\n`_.findIndex` 와 비슷하지만 이 메서드는 요소를 오른쪽에서 왼쪽으로 찾습니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [predicate=_.identity] (Function): 반복마다 호출되는 함수<br>\r\n\\- [fromIndex=array.length-1] (number): 검색할 인덱스\r\n\r\n***Returns***<br>\r\n\\- (number): 찾은 요소의 인덱스, 없을 경우 -1\r\n\r\n```js\r\nvar users = [\r\n  {user: barney, active: true},\r\n  {user: fred, active: false},\r\n  {user: pebbles, active: false}\r\n];\r\n \r\n_.findLastIndex(users, function(o) {return o.user == 'pebbles';});\r\n// => 2\r\n \r\n// The `_.matches` iteratee shorthand.\r\n_.findLastIndex(users, {user: 'barney', active: true });\r\n// => 0\r\n \r\n// The `_.matchesProperty` iteratee shorthand.\r\n_.findLastIndex(users, ['active', false]);\r\n// => 2\r\n \r\n// The `_.property` iteratee shorthand.\r\n_.findLastIndex(users, 'active');\r\n// => 0\r\n```\r\n\r\n## _.flatten\r\n\r\n2차원 배열을 1차원 배열로 평평하게 변환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\n_.flatten([1, [2, [3, [4]], 5]]);\r\n// => [1, 2, [3, [4]], 5]\r\n```\r\n\r\n## _.flattenDeep\r\n\r\n다차원 배열을 반복적으로 평평하게 변환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\n_.flattenDeep([1, [2, [3, [4]], 5]]);\r\n// => [1, 2, 3, 4, 5]\r\n```\r\n\r\n## _.flattenDepth\r\n\r\n다차원 배열을 재귀 깊이 만큼 평평하게 변환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [depth=1] (number): 재귀 깊이\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\nvar array = [1, [2, [3, [4]], 5]];\r\n \r\n_.flattenDepth(array, 1);\r\n// => [1, 2, [3, [4]], 5]\r\n \r\n_.flattenDepth(array, 2);\r\n// => [1, 2, 3, [4], 5]\r\n```"},{"excerpt":"웹 접근성 이란? 웹 접근성은 「지능정보화기본법」에 따라 장애인이나 고령자분들이 웹 사이트에서 제공하는 정보를 비장애인과 동등하게 접근하고 이용 할 수 있도록 보장하는 것으로 웹 접근성 준수는 법적의무사항 입니다. 웹 접근성 진단표 아래 진단표는 행정안전부에서 게시한 전자정부 웹사이트 품질관리 가이드를 근거로 합니다. 1. 인식의 용이성 1.1 대체텍스트…","fields":{"slug":"/웹사이트-웹접근성-진단하기/"},"frontmatter":{"date":"September 24, 2022","title":"웹사이트 웹접근성 진단하기","tags":["html","웹접근성"]},"rawMarkdownBody":"\r\n## 웹 접근성 이란?\r\n\r\n웹 접근성은 「지능정보화기본법」에 따라 장애인이나 고령자분들이 웹 사이트에서 제공하는 정보를 비장애인과 동등하게 접근하고 이용 할 수 있도록 보장하는 것으로 웹 접근성 준수는 **법적의무사항** 입니다.\r\n\r\n## 웹 접근성 진단표\r\n\r\n아래 진단표는 행정안전부에서 게시한 **전자정부 웹사이트 품질관리 가이드**를 근거로 합니다.\r\n\r\n### 1. 인식의 용이성\r\n\r\n#### 1.1 대체텍스트\r\n\r\n\\- 적절한 대체 텍스트 제공<br>\r\n텍스트 아닌 콘텐츠는 그 의미나 용도를 인식할 수 있도록 대체 텍스트를 제공해야 함\r\n\r\n#### 1.2 멀티미디어 대체 수단\r\n\r\n\\- 자막 제공<br>\r\n멀티미디어 콘텐츠에는 자막, 대본 또는 수화를 제공해야 함\r\n\r\n#### 1.3 명료성\r\n\r\n\\- 색에 무관한 콘텐츠 인식<br>\r\n콘텐츠는 색에 관계없이 인식될 수 있어야 함\r\n\r\n\\- 명확한 지시사항 제공<br>\r\n지시사항은 모양, 크기, 위치, 방향, 색, 소리 등에 관계없이 인식될 수 있어야 함\r\n\r\n\\- 텍스트 콘텐츠의 명도 대비<br>\r\n텍스트 콘텐츠와 배경 간의 명도 대비는 4.5대 1 이상이어야 함\r\n\r\n\\- 자동 재생 금지<br>\r\n자동으로 소리가 재생되지 않아야 함\r\n\r\n\\- 콘텐츠 가의 구분<br>\r\n이웃한 콘텐츠는 구별될 수 있어야 함\r\n\r\n### 2. 운용의 용이성\r\n\r\n#### 2.1 입력장치 접근성\r\n\r\n\\- 키보드 사용 보장<br>\r\n모든 기능은 키보드만으로도 사용할 수 있어야 함\r\n\r\n\\- 초점 이동<br>\r\n키보드에 의한 초점은 논리적으로 이동해야하며 시각적으로 구별할 수 있어야 함\r\n\r\n\\- 조작 가능<br>\r\n사용자 입력 및 컨트롤은 조작 가능하도록 제공되어야 함\r\n\r\n#### 2.2 충분한 시간 제공\r\n\r\n\\- 응답시간 조절<br>\r\n시간제한이 있는 콘텐츠는 응답시간을 조절할 수 있어야 함\r\n\r\n\\- 정지 기능 제공<br>\r\n자동으로 변경되는 콘텐츠는 움직임을 제어할 수 있어야 함\r\n\r\n#### 2.3 광과민성 발작 예방\r\n\r\n\\- 깜빡임과 번쩍임 사용 제한<br>\r\n초당 3~50회 주기로 깜빡이거나 번쩍이는 콘텐츠를 제공하지 않아야 함\r\n\r\n#### 2.4 쉬운 내비게이션\r\n\r\n\\- 반복영역 건너뛰기<br>\r\n콘텐츠의 반복되는 영역은 건너뛸 수 있어야 함\r\n\r\n\\- 제목 제공<br>\r\n페이지, 프레임, 콘텐츠 블록에는 적절한 제목을 제공해야 함\r\n\r\n\\- 적절한 링크 텍스트<br>\r\n링크 텍스트는 용도나 목적을 이해할 수 있도록 제공해야 함\r\n\r\n### 3. 이해의 용이성\r\n\r\n#### 3.1 가독성\r\n\r\n\\- 기본 언어 표시<br>\r\n주로 사용하는 언어를 명시해야 함\r\n\r\n#### 3.2 예측가능성\r\n\r\n\\- 사용자 요구에 따른 실행<br>\r\n사용자가 의도하지 않은 기능(새창, 초점에 의한 맥락변화 등)\r\n\r\n#### 3.3 콘텐츠의 논리성\r\n\r\n\\- 콘텐츠의 선형 구조<br>\r\n콘텐츠는 논리적인 순서로 제공해야 함\r\n\r\n\\- 표의 구성<br>\r\n표는 이해하기 쉽게 구성해야 함\r\n\r\n#### 3.4 입력 도움\r\n\r\n\\- 레이블 제공<br>\r\n사용자 입력에는 대응하는 레이블을 제공해야 함\r\n\r\n\\- 오류 정정<br>\r\n입력 오류를 정정할 수 있는 방법을 제공해야 함\r\n\r\n### 4. 견고성\r\n\r\n#### 4.1 문법 준수\r\n\r\n\\- 마크업 오류 방지<br>\r\n마크업 언어의 요소는 열고 닫음, 중첩 관계 및 속성 선언에 오류가 없어야 함\r\n\r\n#### 4.3 웹 애플리케이션 접근성\r\n\r\n\\- 웹 애플리케이션 접근성 준수<br>\r\n컨텐츠에 포함된 웹 애플리케이션은 접근성이 있어야 함"},{"excerpt":"_.drop 앞에서 부터 n개의 요소를 제거한 새 배열을 반환합니다. Arguments\n- array (Array): 대상 배열\n- n=1 (number): 삭제할 요소 수 Returns\n- (Array): 결과 배열 _.dropRight 끝에서 부터 n개의 요소를 제거한 새 배열을 반환합니다. Arguments\n- array (Array): 대상 배열\n…","fields":{"slug":"/Lodash-Array-Methods-2/"},"frontmatter":{"date":"September 23, 2022","title":"Lodash Array Methods 2","tags":["Javascript","Lodash"]},"rawMarkdownBody":"\r\n## _.drop\r\n\r\n앞에서 부터 n개의 요소를 제거한 새 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [n=1] (number): 삭제할 요소 수\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n\r\n```js\r\n_.drop([1, 2, 3]);\r\n// => [2, 3]\r\n \r\n_.drop([1, 2, 3], 2);\r\n// => [3]\r\n \r\n_.drop([1, 2, 3], 5);\r\n// => []\r\n \r\n_.drop([1, 2, 3], 0);\r\n// => [1, 2, 3]\r\n```\r\n\r\n## _.dropRight\r\n\r\n끝에서 부터 n개의 요소를 제거한 새 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [n=1] (number): 삭제할 요소 수\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\n_.dropRight([1, 2, 3]);\r\n// => [1, 2]\r\n \r\n_.dropRight([1, 2, 3], 2);\r\n// => [1]\r\n \r\n_.dropRight([1, 2, 3], 5);\r\n// => []\r\n \r\n_.dropRight([1, 2, 3], 0);\r\n// => [1, 2, 3]\r\n```\r\n\r\n## _.dropRightWhile\r\n\r\n끝에서 부터 술어가 false를 반환할 때까지 순환하면서 요소들을 삭제한 후 결과 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [predicate=identity] (Funtion): 반복마다 호출되는 함수\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\nvar users = [\r\n  { 'user': 'barney',  'active': true },\r\n  { 'user': 'fred',    'active': false },\r\n  { 'user': 'pebbles', 'active': false }\r\n];\r\n \r\n_.dropRightWhile(users, function(o) { return !o.active; });\r\n// => objects for ['barney']\r\n \r\n// The `_.matches` iteratee shorthand.\r\n_.dropRightWhile(users, { 'user': 'pebbles', 'active': false });\r\n// => objects for ['barney', 'fred']\r\n \r\n// The `_.matchesProperty` iteratee shorthand.\r\n_.dropRightWhile(users, ['active', false]);\r\n// => objects for ['barney']\r\n \r\n// The `_.property` iteratee shorthand.\r\n_.dropRightWhile(users, 'active');\r\n// => objects for ['barney', 'fred', 'pebbles']\r\n```\r\n\r\n## _.dropWhile\r\n\r\n앞에서 부터 술어가 false를 반환할 때까지 순환하면서 요소들을 삭제한 후 결과 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [predicate=identity] (Funtion): 반복마다 호출되는 함수\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\nvar users = [\r\n  { 'user': 'barney',  'active': false },\r\n  { 'user': 'fred',    'active': false },\r\n  { 'user': 'pebbles', 'active': true }\r\n];\r\n \r\n_.dropWhile(users, function(o) { return !o.active; });\r\n// => objects for ['pebbles']\r\n \r\n// The `_.matches` iteratee shorthand.\r\n_.dropWhile(users, { 'user': 'barney', 'active': false });\r\n// => objects for ['fred', 'pebbles']\r\n \r\n// The `_.matchesProperty` iteratee shorthand.\r\n_.dropWhile(users, ['active', false]);\r\n// => objects for ['pebbles']\r\n \r\n// The `_.property` iteratee shorthand.\r\n_.dropWhile(users, 'active');\r\n// => objects for ['barney', 'fred', 'pebbles']\r\n```\r\n\r\n## _.fill\r\n\r\n배열 요소를 시작부터 끝까지 값을 채웁니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- value (*): 배열을 채울 요소<br>\r\n\\- [start=0] (number): 시작 위치<br>\r\n\\- [end=array.length] (number): 종료 위치\r\n\r\n***Returns***<br>\r\n\\- (Array): 결과 배열\r\n\r\n```js\r\nvar array = [1, 2, 3];\r\n \r\n_.fill(array, 'a');\r\nconsole.log(array);\r\n// => ['a', 'a', 'a']\r\n \r\n_.fill(Array(3), 2);\r\n// => [2, 2, 2]\r\n \r\n_.fill([4, 6, 8, 10], '*', 1, 3);\r\n// => [4, '*', '*', 10]\r\n```"},{"excerpt":"_.chunk 매개변수 길이만큼 그룹으로 분할된 배열을 만듭니다.\n배열을 균등하게 분할할 수 없는 경우 남은 요소들로 마지막 배열을 반환합니다. Arguments\n- array (Array): 대상 배열\n- size=1 (number): 분할 길이 Returns\n- (Array): 분할된 배열 _.compact 잘못된 값이 모두 제거된 배열을 반환합니다.…","fields":{"slug":"/Lodash-Array-Methods-1/"},"frontmatter":{"date":"September 22, 2022","title":"Lodash Array Methods 1","tags":["Javascript","Lodash"]},"rawMarkdownBody":"\r\n## _.chunk\r\n\r\n매개변수 길이만큼 그룹으로 분할된 배열을 만듭니다.<br>\r\n배열을 균등하게 분할할 수 없는 경우 남은 요소들로 마지막 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [size=1] (number): 분할 길이\r\n\r\n***Returns***<br>\r\n\\- (Array): 분할된 배열\r\n\r\n\r\n```js\r\n_.chunk(['a', 'b', 'c', 'd'], 2);\r\n// => [['a', 'b'], ['c', 'd']]\r\n \r\n_.chunk(['a', 'b', 'c', 'd'], 3);\r\n// => [['a', 'b', 'c'], ['d']]\r\n```\r\n\r\n## _.compact\r\n\r\n잘못된 값이 모두 제거된 배열을 반환합니다.<br>\r\n`false`, `null`, `0`, `\"\"`, `undefined` 그리고 `NaN`은 제거됩니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열\r\n\r\n***Returns***<br>\r\n\\- (Array): 필터링 된 값의 새 배열\r\n\r\n```js\r\n_.compact([0, 1, false, 2, '', 3]);\r\n// => [1, 2, 3]\r\n```\r\n\r\n## _.concat\r\n\r\n대상 배열에 배열 또는 값을 연결하여 새 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 대상 배열<br>\r\n\\- [values] (...*): 연결할 배열 또는 값\r\n\r\n***Returns***<br>\r\n\\- (Array): 연결된 새 배열\r\n\r\n```js\r\nvar array = [1];\r\nvar other = _.concat(array, 2, [3], [[4]]);\r\n \r\nconsole.log(other);\r\n// => [1, 2, 3, [4]]\r\n \r\nconsole.log(array);\r\n// => [1]\r\n```\r\n\r\n## _.difference\r\n\r\n두 배열을 받아 동일성 비교를 하여 앞의 배열에서 뒤의 배열과 다른 요소들을 모아 새 배열을 반환합니다. 결과값의 순서 및 참조는 제1 배열에 의해 결정됩니다.\r\n\r\n참고 : `_.pullAll`과 달리 이 메서드는 새 배열을 반환합니다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 검사할 배열<br>\r\n\\- [values] (...Array): 제외할 배열\r\n\r\n***Returns***<br>\r\n\\- (Array): 필터링 된 값의 새 배열\r\n\r\n```js\r\n_.difference([2, 1], [2, 3]);\r\n// => [1]\r\n```\r\n\r\n## _.differenceBy\r\n\r\ndifference에서 추가로 대상 배열의 순회 함수를 인자로 받는다.<br>\r\n대상 배열들은 함수에 의해 한번 순회를 거친후 비교된다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 검사할 배열<br>\r\n\\- [values] (...Array): 제외할 배열<br>\r\n\\- [comparator] (Function): 순회 함수\r\n\r\n***Returns***<br>\r\n\\- (Array): 필터링 된 값의 새 배열\r\n\r\n```js\r\n_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\r\n// => 1.2\r\n```\r\n\r\n```js\r\nconst members = [\r\n  {id: 1, name: '김철수',},\r\n  {id: 2, name: '박철수',},\r\n  {id: 3, name: '이철수',}\r\n];\r\n\r\n_.differenceBy(members, [\r\n  {id: 1, name: '김봉남'},\r\n  {id: 4, name: '이철수'}\r\n], member => member.id);\r\n\r\n/* => [\r\n  {id: 2, name: '박철수',},\r\n  {id: 3, name: '이철수',}\r\n] */\r\n```\r\n\r\n## _.differenceWith\r\n\r\ndifference에서 추가로 대상 배열의 비교 함수를 인자로 받는다.<br>\r\n비교 함수로 대상 배열들의 동일성 여부를 판별한다.\r\n\r\n***Arguments***<br>\r\n\\- array (Array): 검사할 배열<br>\r\n\\- [values] (...Array): 제외할 배열<br>\r\n\\- [comparator] (Function): 비교 함수\r\n\r\n***Returns***<br>\r\n\\- (Array): 필터링 된 값의 새 배열\r\n\r\n```js\r\n_.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);\r\n// => 1.2\r\n```\r\n\r\n```js\r\nconst members = [\r\n  {id: 1, name: '김철수',},\r\n  {id: 2, name: '박철수',},\r\n  {id: 3, name: '이철수',}\r\n];\r\n\r\n_.differenceWith(members, [\r\n  {id: 1, name: '김봉남'},\r\n  {id: 4, name: '이철수'}\r\n], (a, b) => a.name === b.name);\r\n\r\n/* => [\r\n  {id: 1, name: '김철수',},\r\n  {id: 2, name: '박철수',}\r\n] */\r\n```\r\n"},{"excerpt":"반응형이미지란? 클라이언트 환경에 따라 최적화된 이미지 리소스를 불러와 렌더링하는 이미지 또는 기술을 말합니다.  나  같은 모던 프론트 프레임워크 환경에선 각 프레임워크가 제공하는 조건부 렌더링 문법을 사용하여 반응형 이미지를 구현할 수 있으며\n코어  만을 사용하여도 큰 어려움 없이 구현할 수 있습니다. 하지만 오늘은 javascript의 도움 없이 h…","fields":{"slug":"/반응형이미지를-구현하는-두가지-방법/"},"frontmatter":{"date":"September 21, 2022","title":"반응형이미지를 구현하는 두가지 방법","tags":["CSS","html","반응형","이미지"]},"rawMarkdownBody":"\r\n## 반응형이미지란?\r\n\r\n클라이언트 환경에 따라 최적화된 이미지 리소스를 불러와 렌더링하는 이미지 또는 기술을 말합니다.\r\n\r\n`React` 나 `Vue.js` 같은 모던 프론트 프레임워크 환경에선 각 프레임워크가 제공하는 조건부 렌더링 문법을 사용하여 반응형 이미지를 구현할 수 있으며\r\n코어 `javascript` 만을 사용하여도 큰 어려움 없이 구현할 수 있습니다.\r\n\r\n하지만 오늘은 javascript의 도움 없이 html과 CSS만으로 반응형 이미지를 구현하는 두가지 방법을 다뤄보겠습니다.\r\n\r\n## picture tag\r\n\r\n첫번째 방법은 html의 `picture` 태그를 사용하는 것입니다.<br>\r\n`picture` 태그는 img 요소의 다중 이미지 리소스를 위한 컨테이너의 역할을 합니다.\r\n\r\n`source` 태그를 사용하면 각 환경에 잘 어울리는 이미지를 불러올 수 있으며<br>\r\n`img` 태그는 기본 이미지를 불러옵니다.\r\n\r\n```html\r\n<picture>\r\n  <source media=\"(max-width: 768px)\" srcset=\"./mobile.jpg\">\r\n  <img src=\"./desktop.jpg\" alt=\"device\">\r\n</picture>\r\n```\r\n\r\n## CSS content\r\n\r\n두번째 방법은 CSS의 `content` 속성을 사용하여 img 리소스를 스위칭 하는 것입니다.<br>\r\n`img` 태그에는 기본 이미지를 불러오고 CSS의 미디어쿼리로 환경에 따른 이미지 리소스를 스위칭 합니다.\r\n\r\n```html\r\n<img src=\"./desktop.jpg\" alt=\"device\">\r\n```\r\n\r\n```CSS\r\n@media screen and(max-width: 768px) {\r\n  img {\r\n    content: url(./mobile.jpg);\r\n  }\r\n}\r\n```"},{"excerpt":"React에 CSS를 적용하는 방법은 여러가지가 있습니다. 1. inline styling html태그  속성에 직접 json형태의 CSS를 할당하는 방법입니다. 같은 방법으로 CSS를 javascript 변수에 담아 사용할 수도 있습니다. 2. CSS file import 별도의 css 파일을 만들어 import 하는 방법입니다. 이 방법은 CSS적용 …","fields":{"slug":"/React에-CSS-적용하기/"},"frontmatter":{"date":"September 20, 2022","title":"React에 CSS 적용하기","tags":["React","CSS"]},"rawMarkdownBody":"\r\nReact에 CSS를 적용하는 방법은 여러가지가 있습니다.\r\n\r\n## 1. inline styling\r\n\r\n```jsx\r\nconst Example = () => {\r\n  return (\r\n    <div style={{color: 'red'}}>\r\n      <p>Text</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nhtml태그 `style` 속성에 직접 json형태의 CSS를 할당하는 방법입니다.\r\n\r\n같은 방법으로 CSS를 javascript 변수에 담아 사용할 수도 있습니다.\r\n\r\n```jsx\r\nconst Example = () => {\r\n  const styleObj = {\r\n    color: 'red'\r\n  }\r\n\r\n  return (\r\n    <div style={styleObj}>\r\n      <p>Text</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n## 2. CSS file import\r\n\r\n별도의 css 파일을 만들어 import 하는 방법입니다.\r\n\r\n```css\r\n/* Example.css */\r\n\r\n.txt {\r\n  color: red;\r\n}\r\n```\r\n\r\n```jsx\r\n// Example.jsx\r\n\r\nimport './Example.css'\r\n\r\nconst Example = () => {\r\n  return (\r\n    <div className=\"txt\">\r\n      <p>Text</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n이 방법은 CSS적용 범위가 전역이라는 점을 주의해야합니다.\r\n\r\n만약 작성한 CSS를 해당 컴포넌트에만 적용하고 싶다면<br>\r\nCSS 파일명과 확장자 사이에 `.module`을 추가해야 합니다.\r\n\r\n```css\r\n/* Example.module.css */\r\n\r\n.txt {\r\n  color: red;\r\n}\r\n```\r\n\r\n```jsx\r\n// Example.jsx\r\n\r\nimport './Example.module.css'\r\n\r\nconst Example = () => {\r\n  return (\r\n    <div className=\"txt\">\r\n      <p>Text</p>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n## 3. styled-components\r\n\r\nstyled-components 패키지를 설치하면 컴포넌트 내부에 CSS를 작성할 수 있습니다.<br>\r\n개인적으로 가장 추천하는 방식입니다.\r\n\r\n```cmd\r\nnpm install styled-components\r\nor\r\nyarn add styled-components\r\n```\r\n\r\n```jsx\r\nimport styled from \"styled-components\"\r\n\r\n// styled\r\nconst StyledWrapper = styled.div`\r\n  color: red;\r\n`\r\n\r\nconst Example = () => {\r\n  return (\r\n    <StyledWrapper>\r\n      <p>Text</p>\r\n    </StyledWrapper>\r\n  )\r\n}\r\n```"},{"excerpt":"옵셔널 체이닝(optional chaining)  을 사용하면 없을수도 있는 객체의 프로퍼티에 에러 없이 접근할 수 있습니다. 옵셔널 체이닝이 필요한 이유 이제 막 자바스크립트를 배우기 시작했다면 옵셔널 체이닝이 등장하게 된 배경 상황을 직접 겪어보지 않았을 겁니다. 몇 가지 사례를 재현하면서 왜 옵셔널 체이닝이 등장했는지 알아봅시다. 사용자가 여러 명 …","fields":{"slug":"/Javascript-옵셔널-체이닝/"},"frontmatter":{"date":"January 12, 2022","title":"Javascript 옵셔널 체이닝","tags":["Javascript"]},"rawMarkdownBody":"\r\n옵셔널 체이닝(optional chaining) `?.` 을 사용하면 없을수도 있는 객체의 프로퍼티에 에러 없이 접근할 수 있습니다.\r\n\r\n## 옵셔널 체이닝이 필요한 이유\r\n\r\n이제 막 자바스크립트를 배우기 시작했다면 옵셔널 체이닝이 등장하게 된 배경 상황을 직접 겪어보지 않았을 겁니다. 몇 가지 사례를 재현하면서 왜 옵셔널 체이닝이 등장했는지 알아봅시다.\r\n\r\n사용자가 여러 명 있는데 그중 몇 명은 주소 정보를 가지고 있지 않다고 가정해봅시다. 이럴 때 `user.address.street`를 사용해 주소 정보에 접근하면 에러가 발생할 수 있습니다.\r\n\r\n```js\r\nlet user = {}; // 주소 정보가 없는 사용자\r\n\r\nalert(user.address.street); // TypeError: Cannot read property 'street' of undefined\r\n```\r\n\r\n또 다른 사례론 브라우저에서 동작하는 코드를 개발할 때 발생할 수 있는 문제가 있습니다. 자바스크립트를 사용해 페이지에 존재하지 안흔 요소에 접근해 요소의 정보를 가져오려 하면 문제가 발생하죠.\r\n\r\n ```js\r\n let user = {}; // 주소 정보가 없는 사용자\r\n\r\n alert(user && user.address && user.address.street); // undefined, 에러가 발생하지 않습니다.\r\n ```\r\n\r\n 중첩 객체의 특정 프로퍼티에 접근하기 위해 거쳐야 할 구성요소들을 AND로 연결해 실제 해당 객체나 프로퍼티가 있는지 확인하는 방법을 사용했었죠. 그런데 이렇게 AND를 연결해서 사용하면 코드가 아주 길어진다는 단점이 있습니다.\r\n\r\n ## 옵셔널 체이닝의 등장\r\n\r\n `?.`은 `?.`'앞'의 평가 대상이 `undefined` 나 `null` 이면 평가를 멈추고 `undefined` 를 반환합니다.\r\n\r\n 설명이 장황해지지 않도록 지금부턴 평가후 결과가 `null` 이나 `undefined` 가 아닌 경우엔 값이 '있다' 혹은 '존재한다'라고 표현하겠습니다.\r\n\r\n 이제 옵셔널 체이닝을 사용해 `user.address.street` 에 안전하게 접근해봅시다.\r\n\r\n ```js\r\n let user = {}; // 주소 정보가 없는 사용자\r\n\r\n alert(user?.address?.street); // undefined, 에러가 발생하지 않습니다.\r\n ```\r\n\r\n `user?.address`로 주소를 읽으면 아래와 같이 `user` 객체가 존재하지 않더라도 에러가 발생하지 않습니다.\r\n\r\n ```js\r\n let user = null;\r\n\r\n alert(user?.address); // undefined\r\n alert(user?.address.street); // undefined\r\n ```\r\n\r\n위 예시를 통해 우리는 `?.` 은 `?.` '앞' 평가 대상에만 동작되고, 확장은 되지 않는다는 사실을 알 수 있습니다.\r\n\r\n참고로 위 예시에서 사용된 `user?.` 는 `user` 가 `null` 이나 `undefined` 인 경우만 처리할 수 있습니다.\r\n\r\n`user` 가 `null` 이나 `undefined` 가 아니고 실제 값이 존재하는 경우엔 반드시 `user.address` 프로퍼티는 있어야합니다. 그렇지 않으면 `user?.address.street` 의 두 번째 점 연산자에서 에러가 발생합니다.\r\n\r\n## 단락 평가\r\n\r\n`?.` 는 왼쪽 평가대상에 값이 없으면 즉시 평가를 멈춥니다. 참고로 이런 평가 방법을 단락 평가(short-circuit)라고 부릅니다.\r\n\r\n그렇기 때문에 함수 호출을 비롯한 `?.` 오른쪽에 있는 부가 동작은 `?.` 의 평가가 멈췄을 때 더는 일어나지 않습니다.\r\n\r\n```js\r\nlet user = null;\r\nlet x = 0;\r\n\r\nuser?.sayHi(x++); // 아무 일도 일어나지 않습니다.\r\n\r\nalert(x); // 0, x는 증가하지 않습니다.\r\n```\r\n\r\n## ?.()와 ?.[]\r\n\r\n`?.` 은 연산자가 아닙니다. `?.` 은 함수나 대괄호와 함께 동작하는 특별한 문법 구조체(syntax construct)입니다.\r\n\r\n함수 관련 예시와 함께 존재 여부가 확실치 않은 함수를 호출할 때 `?.()` 를 어떻게 쓸 수 있는지 알아봅시다.\r\n\r\n한 객체엔 메서드 `admin` 이 있지만 다른 객체엔 없는 상황입니다.\r\n\r\n```js\r\nlet user1 = {\r\n  admin() {\r\n    alert('관리자 계정입니다.');\r\n  }\r\n}\r\n\r\nlet user2 = {};\r\n\r\nuser1.admin?.(); // 관리자 계정입니다.\r\nuser2.admin?.();\r\n```\r\n\r\n두 상황 모두에서 user 객체는 존재하기 때문에 `admin` 프로퍼티는 `.` 만 사용해 접근했습니다.\r\n\r\n그리고 난 후 `?.()` 를 사용해 `admin` 의 존재 여부를 확인했습니다. `user` 엔 `admin` 이 정의되어 있기 때문에 메서드가 제대로 호출되었습니다. 반면 `user` 엔 `admin` 이 정의되어 있지 않았음에도 불구하고 메서드를 호출하면 에러 없이 그냥 평가가 멈추는 것을 확인할 수 있습니다.\r\n\r\n`.` 대신 대괄호 `[]` 를 사용해 객체 프로퍼티에 접근하는 경우엔 `?.[]` 를 사용할 수도 있습니다. 위 예시와 마찬가지로 `?.[]` 를 사용하면 객체 존재 여부가 확실치 않은 경우에도 안전하게 프로퍼티를 읽을 수 있습니다.\r\n\r\n```js\r\nlet user1 = {\r\n  firstName: 'Violet'\r\n}\r\n\r\nlet user2 = null; // user2는 권한이 없는 사용자라고 가정해봅시다.\r\n\r\nlet key = 'firstName';\r\n\r\nalert(user1?.[key]); // Violet\r\nalert(user2?.[key]); // undefined\r\n\r\nalert( user1?.[key]?.something?.not?.existing); // undefined\r\n```\r\n\r\n`?.` 은 `delete` 와 조합해 사용할 수도 있습니다.\r\n\r\n```js\r\ndelete user?.name; // user가 존재하면 user.name을 삭제합니다.\r\n```\r\n\r\n출처 : https://ko.javascript.info/optional-chaining"},{"excerpt":"nullish 병합 연산자 (nullish coalescing operator) 를 사용하면 짧은 문법으로 여러 피연산자 중 그 값이 '확정되어있는' 변수를 찾을 수 있습니다. 의 평가 결과는 다음과 같습니다. 가 도 아니고 도 아니면  그 외의 경우는  nullish 병합 연산자 없이 와 동일한 동작을 하는 코드를 작성하면 다음과 같습니다. 비교 연산자…","fields":{"slug":"/Javascript-nullish-병합-연산자/"},"frontmatter":{"date":"January 11, 2022","title":"Javascript nullish 병합 연산자","tags":["Javascript"]},"rawMarkdownBody":"\r\nnullish 병합 연산자 (nullish coalescing operator) `??`를 사용하면 짧은 문법으로 여러 피연산자 중 그 값이 '확정되어있는' 변수를 찾을 수 있습니다.\r\n\r\n`a ?? b`의 평가 결과는 다음과 같습니다.\r\n\r\n- `a`가 `null`도 아니고 `undefined`도 아니면 `a`\r\n- 그 외의 경우는 `b`\r\n\r\nnullish 병합 연산자 `??`없이 `x = a ?? b`와 동일한 동작을 하는 코드를 작성하면 다음과 같습니다.\r\n\r\n```js\r\nx = (a !== null && a !== undefined) ? a : b;\r\n```\r\n\r\n비교 연산자와 논리 연산자만으로 nullish 병합 연산자와 같은 기능을 하는 코드를 작성하니 코드 길이가 길어지네요.\r\n\r\n또 다른 예시를 살펴봅시다. `firstName`, `lastName`, `nickName`이란 변수에 사용자 이름이나 별명을 저장하는데, 사용자가 아무런 정보도 입력하지 않는 케이스도 허용한다고 해보겠습니다.\r\n\r\n화면엔 세 변수 중 실제 값이 있는 변수의 값을 출력하는데, 세 변수 모두 값이 없다면 '익명의 사용자'가 출력되도록 해보죠.\r\n\r\n이럴 때 nullish 병합 연산자 `??`를 사용하면 값이 정해진 변수를 간편하게 찾아낼 수 있습니다.\r\n\r\n```js\r\nlet firstName = null;\r\nlet lastName = null;\r\nlet nickName = '바이올렛';\r\n\r\nalert(firstName ?? lastName ?? nickName ?? '익명의 사용자');\r\n```\r\n\r\n## '??'와 '||'의 차이\r\n\r\nnullish 병합 연산자는 OR 연산자 `||`와 상당히 유사해 보입니다. 실제로 위 예시에서 `??`를 `||`로 바꿔도 그 결과는 동일하기까지 하죠.\r\n\r\n그런데 두 연산자 사이에는 중요한 차이점이 있습니다.\r\n\r\n- `||`는 첫 번째 truthy 값을 반환합니다.\r\n- `??`는 첫 번째 정의된(defined) 값을 반환합니다.\r\n\r\n`null`과 `undefined`, 숫자 `0`을 구분 지어 다뤄야 할 때 이 차이점은 매우 중요한 역할을 합니다.\r\n\r\n```js\r\nheight = height ?? 100;\r\n```\r\n\r\n`height`에 값이 정의되지 않은경우 `height`엔 `100`이 할당됩니다.\r\n이제 `??`와 `||`을 비교해봅시다.\r\n\r\n```js\r\nlet height = 0;\r\n\r\nalert(height || 100); // 100\r\nalert(height ?? 100); // 0\r\n```\r\n\r\n`height || 100`은 `height`에 `0`을 할당했지만 `0`을 falsy 한 값으로 취급했기 때문에 `null`이나 `undefined`를 할당한 것과 동일하게 처리합니다. 따라서 `height || 100`의 평가 결과는 `100`입니다.\r\n\r\n반면 `height ?? 0`의 평가 결과는 `height`가 정확하게 `null`이나 `undefined`일 경우에만 `100`이 됩니다. 예시에선 `height`에 `0`이라는 값을 할당했기 때문에 얼럿창엔 `0`이 출력됩니다.\r\n\r\n이런 특징 때문에 높이처럼 `0`이 할당될 수 있는 변수를 사용해 기능을 개발할 땐 `||`보다 `??`가 적합합니다.\r\n\r\n## 연산자 우선순위\r\n\r\n`??`의 연산자 우선순위는 `5`로 꽤 낮습니다.\r\n\r\n따라서 `??`는 `=`와 `?`보다는 먼저, 대부분의 연산자보다는 나중에 평가됩니다.\r\n\r\n그렇기 때문에 복잡한 표현식 안에서 `??`를 사용해 값을 하나 선택할 땐 괄호를 추가하는게 좋습니다.\r\n\r\n```js\r\nlet height = null;\r\nlet width = null;\r\n\r\nlet area = (height ?? 100) * (width ?? 50);\r\n\r\nalert(area); // 5000\r\n```\r\n\r\n`??`엔 자바스크립트 언어에서 규정한 또 다른 제약사항이 있습니다.\r\n\r\n안정성 관련 이슈 때문에 `??`는 `&&`나 `||`와 함께 사용하지 못합니다.\r\n\r\n아래 예시를 실행하면 문법 에러가 발생합니다.\r\n\r\n```js\r\nlet x = 1 && 2 ?? 3; // SyntaxError: Unexpected token '??'\r\n```\r\n\r\n이 제약에 대해선 아직 논쟁이 많긴 하지만 사람들이 `||`를 `??`로 바꾸기 시작하면서 만드는 실수를 방지하고자 명세서에 제약이 추가된 상황입니다.\r\n\r\n제약을 피하려면 괄호를 사용해주세요.\r\n\r\n```js\r\nlet x = (1 && 2) ?? 3;\r\n```\r\n\r\n\r\n출처 : https://ko.javascript.info/nullish-coalescing-operator"},{"excerpt":"어림수 구하기 어림수를 구하는 것(rounding)은 숫자를 다룰 때 가장 많이 사용되는 연산 중 하나입니다. Math.floor (내림, 버림) 소수점 첫째 자리에서 내림(버림). 은 , 은 가 됩니다. Math.ceil (올림) 소수점 첫째 자리에서 올림. 은 , 은 이 됩니다. Math.round (반올림) 소수점 첫째 자리에서 반올림. 은 , 은 …","fields":{"slug":"/Javascript-어림수-구하기/"},"frontmatter":{"date":"December 24, 2021","title":"Javascript 어림수 구하기","tags":["Javascript"]},"rawMarkdownBody":"\r\n## 어림수 구하기\r\n\r\n어림수를 구하는 것(rounding)은 숫자를 다룰 때 가장 많이 사용되는 연산 중 하나입니다.\r\n\r\n\r\n### Math.floor (내림, 버림)\r\n\r\n소수점 첫째 자리에서 내림(버림). `3.1`은 `3`, `-1.1`은 `-2`가 됩니다.\r\n\r\n### Math.ceil (올림)\r\n\r\n소수점 첫째 자리에서 올림. `3.1`은 `4`, `-1.1`은 `-1`이 됩니다.\r\n\r\n### Math.round (반올림)\r\n\r\n소수점 첫째 자리에서 반올림. `3.1`은 `3`, `3.6`은 `4`, `-1.1`은 `-1`이 됩니다.\r\n\r\n### Math.trunc (무시, Internet Explorer에서는 지원하지 않음)\r\n\r\n소수부를 무시. `3.1`은 `3`이 되고 `-1.1`은 `-1`이 됩니다."},{"excerpt":"Nuxt, Vue 프로젝트에 Datepicker 적용이 처음이라\n어떤 라이브러리가 좋을지 이것저것 찾아봤습니다.\n많이사용하는 라이브러리는 크게 3가지(, , ) 였는데\n일단 는 JQuery를 사용해야하는 점에서 제외했고\n역시 사용하는 기능에비해 붙어야하는 모듈의 용량이 너무 커 제외했습니다.\n아래 예제는 프로젝트에 를 적용하는 방법입니다. 설치  플러그인…","fields":{"slug":"/Nuxt-Datepicker-적용하기/"},"frontmatter":{"date":"November 25, 2021","title":"[Nuxt.js] Datepicker UI 적용하기","tags":["Vue","Nuxt"]},"rawMarkdownBody":"\r\nNuxt, Vue 프로젝트에 Datepicker 적용이 처음이라<br>\r\n어떤 라이브러리가 좋을지 이것저것 찾아봤습니다.<br>\r\n많이사용하는 라이브러리는 크게 3가지(`JQuery UI`, `Bootstrap`, `Vue2-datepicker`) 였는데<br>\r\n일단 `JQuery UI`는 JQuery를 사용해야하는 점에서 제외했고<br>\r\n`Bootstrap`역시 사용하는 기능에비해 붙어야하는 모듈의 용량이 너무 커 제외했습니다.<br>\r\n아래 예제는 `Nuxt`프로젝트에 `Vue2-datepicker`를 적용하는 방법입니다.\r\n\r\n\r\n## 설치\r\n\r\n`npm install vue2-datepicker`\r\n\r\n## 플러그인 작성\r\n\r\n`Nuxt.js`에서 외부 컴포넌트를 사용할땐 `plugin`에서 글로벌 등록을 하는게 편합니다.<br>\r\n그렇게 하면 페이지마다 해당 컴포넌트와 관련 style파일(css, scss)들을 등록하는 수고를 줄일 수 있습니다.\r\n\r\n```js [plugins/components.js]\r\nimport Vue from 'vue'\r\nimport DatePicker from 'vue2-datepicker'\r\nimport 'vue2-datepicker/index.css'; // datepicker 스타일\r\nimport 'vue2-datepicker/locale/ko'; // datepicker 한글 팩\r\n\r\n// Datepicker\r\nVue.component('DatePicker', DatePicker);\r\n```\r\n\r\n## 플러그인 등록\r\n\r\n```js\r\nnuxt.config.js\r\n\r\nexport default {\r\n  ...\r\n  plugins: [\r\n    \"~/plugins/components\",\r\n  ],\r\n  ...\r\n}\r\n```\r\n\r\n## 페이지에 적용\r\n\r\n```html\r\npages/example.vue\r\n\r\n<template>\r\n  <div>\r\n    <date-picker v-model=\"date\" :format=\"format\" :lang=\"lang\"></date-picker>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Vue from \"vue\";\r\n\r\nexport default Vue.extend({\r\n  data() {\r\n    return {\r\n      date: null,\r\n      format: 'YYYY-MM-DD',\r\n      lang: {\r\n        days: ['일', '월', '화', '수', '목', '금', '토']\r\n      }\r\n    }\r\n  }\r\n});\r\n</script>\r\n```\r\n\r\n## 마무리\r\n\r\n`Vue2-datepicker`의 자세한 옵션들은 <a href=\"https://www.npmjs.com/package/vue2-datepicker\" target=\"_blank\">여기</a>에서 확인할 수 있습니다."},{"excerpt":"Nuxt, Vue 프로젝트에 Datepicker 적용이 처음이라\n어떤 라이브러리가 좋을지 이것저것 찾아봤습니다.\n많이사용하는 라이브러리는 크게 3가지(, , ) 였는데\n일단 는 JQuery를 사용해야하는 점에서 제외했고\n역시 사용하는 기능에비해 붙어야하는 모듈의 용량이 너무 커 제외했습니다.\n아래 예제는 프로젝트에 를 적용하는 방법입니다. 설치  플러그인…","fields":{"slug":"/Nuxt3-Service-배포-삽질-기록/"},"frontmatter":{"date":"November 25, 2021","title":"[Nuxt.js] Datepicker UI 적용하기","tags":["Vue","Nuxt"]},"rawMarkdownBody":"\r\nNuxt, Vue 프로젝트에 Datepicker 적용이 처음이라<br>\r\n어떤 라이브러리가 좋을지 이것저것 찾아봤습니다.<br>\r\n많이사용하는 라이브러리는 크게 3가지(`JQuery UI`, `Bootstrap`, `Vue2-datepicker`) 였는데<br>\r\n일단 `JQuery UI`는 JQuery를 사용해야하는 점에서 제외했고<br>\r\n`Bootstrap`역시 사용하는 기능에비해 붙어야하는 모듈의 용량이 너무 커 제외했습니다.<br>\r\n아래 예제는 `Nuxt`프로젝트에 `Vue2-datepicker`를 적용하는 방법입니다.\r\n\r\n\r\n## 설치\r\n\r\n`npm install vue2-datepicker`\r\n\r\n## 플러그인 작성\r\n\r\n`Nuxt.js`에서 외부 컴포넌트를 사용할땐 `plugin`에서 글로벌 등록을 하는게 편합니다.<br>\r\n그렇게 하면 페이지마다 해당 컴포넌트와 관련 style파일(css, scss)들을 등록하는 수고를 줄일 수 있습니다.\r\n\r\n```js [plugins/components.js]\r\nimport Vue from 'vue'\r\nimport DatePicker from 'vue2-datepicker'\r\nimport 'vue2-datepicker/index.css'; // datepicker 스타일\r\nimport 'vue2-datepicker/locale/ko'; // datepicker 한글 팩\r\n\r\n// Datepicker\r\nVue.component('DatePicker', DatePicker);\r\n```\r\n\r\n## 플러그인 등록\r\n\r\n```js\r\nnuxt.config.js\r\n\r\nexport default {\r\n  ...\r\n  plugins: [\r\n    \"~/plugins/components\",\r\n  ],\r\n  ...\r\n}\r\n```\r\n\r\n## 페이지에 적용\r\n\r\n```html\r\npages/example.vue\r\n\r\n<template>\r\n  <div>\r\n    <date-picker v-model=\"date\" :format=\"format\" :lang=\"lang\"></date-picker>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Vue from \"vue\";\r\n\r\nexport default Vue.extend({\r\n  data() {\r\n    return {\r\n      date: null,\r\n      format: 'YYYY-MM-DD',\r\n      lang: {\r\n        days: ['일', '월', '화', '수', '목', '금', '토']\r\n      }\r\n    }\r\n  }\r\n});\r\n</script>\r\n```\r\n\r\n## 마무리\r\n\r\n`Vue2-datepicker`의 자세한 옵션들은 <a href=\"https://www.npmjs.com/package/vue2-datepicker\" target=\"_blank\">여기</a>에서 확인할 수 있습니다."}]}},"pageContext":{}},"staticQueryHashes":[]}