{"componentChunkName":"component---src-templates-post-jsx","path":"/Javascript-옵셔널-체이닝/","result":{"data":{"site":{"siteMetadata":{"title":"블로그 - SIMPLIZM"}},"markdownRemark":{"id":"7d5747a4-ce74-5abe-9d37-984d8d8a4976","excerpt":"옵셔널 체이닝(optional chaining)  을 사용하면 없을수도 있는 객체의 프로퍼티에 에러 없이 접근할 수 있습니다. 옵셔널 체이닝이 필요한 이유 이제 막 자바스크립트를 배우기 시작했다면 옵셔널 체이닝이 등장하게 된 배경 상황을 직접 겪어보지 않았을 겁니다. 몇 가지 사례를 재현하면서 왜 옵셔널 체이닝이 등장했는지 알아봅시다. 사용자가 여러 명 …","html":"<p>옵셔널 체이닝(optional chaining) <code class=\"language-text\">?.</code> 을 사용하면 없을수도 있는 객체의 프로퍼티에 에러 없이 접근할 수 있습니다.</p>\n<h2>옵셔널 체이닝이 필요한 이유</h2>\n<p>이제 막 자바스크립트를 배우기 시작했다면 옵셔널 체이닝이 등장하게 된 배경 상황을 직접 겪어보지 않았을 겁니다. 몇 가지 사례를 재현하면서 왜 옵셔널 체이닝이 등장했는지 알아봅시다.</p>\n<p>사용자가 여러 명 있는데 그중 몇 명은 주소 정보를 가지고 있지 않다고 가정해봅시다. 이럴 때 <code class=\"language-text\">user.address.street</code>를 사용해 주소 정보에 접근하면 에러가 발생할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 주소 정보가 없는 사용자</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TypeError: Cannot read property 'street' of undefined</span></code></pre></div>\n<p>또 다른 사례론 브라우저에서 동작하는 코드를 개발할 때 발생할 수 있는 문제가 있습니다. 자바스크립트를 사용해 페이지에 존재하지 안흔 요소에 접근해 요소의 정보를 가져오려 하면 문제가 발생하죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 주소 정보가 없는 사용자</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>address <span class=\"token operator\">&amp;&amp;</span> user<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined, 에러가 발생하지 않습니다.</span></code></pre></div>\n<p> 중첩 객체의 특정 프로퍼티에 접근하기 위해 거쳐야 할 구성요소들을 AND로 연결해 실제 해당 객체나 프로퍼티가 있는지 확인하는 방법을 사용했었죠. 그런데 이렇게 AND를 연결해서 사용하면 코드가 아주 길어진다는 단점이 있습니다.</p>\n<h2>옵셔널 체이닝의 등장</h2>\n<p> <code class=\"language-text\">?.</code>은 <code class=\"language-text\">?.</code>'앞'의 평가 대상이 <code class=\"language-text\">undefined</code> 나 <code class=\"language-text\">null</code> 이면 평가를 멈추고 <code class=\"language-text\">undefined</code> 를 반환합니다.</p>\n<p> 설명이 장황해지지 않도록 지금부턴 평가후 결과가 <code class=\"language-text\">null</code> 이나 <code class=\"language-text\">undefined</code> 가 아닌 경우엔 값이 '있다' 혹은 '존재한다'라고 표현하겠습니다.</p>\n<p> 이제 옵셔널 체이닝을 사용해 <code class=\"language-text\">user.address.street</code> 에 안전하게 접근해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 주소 정보가 없는 사용자</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">?.</span>address<span class=\"token operator\">?.</span>street<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined, 에러가 발생하지 않습니다.</span></code></pre></div>\n<p> <code class=\"language-text\">user?.address</code>로 주소를 읽으면 아래와 같이 <code class=\"language-text\">user</code> 객체가 존재하지 않더라도 에러가 발생하지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">?.</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">?.</span>address<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p>위 예시를 통해 우리는 <code class=\"language-text\">?.</code> 은 <code class=\"language-text\">?.</code> '앞' 평가 대상에만 동작되고, 확장은 되지 않는다는 사실을 알 수 있습니다.</p>\n<p>참고로 위 예시에서 사용된 <code class=\"language-text\">user?.</code> 는 <code class=\"language-text\">user</code> 가 <code class=\"language-text\">null</code> 이나 <code class=\"language-text\">undefined</code> 인 경우만 처리할 수 있습니다.</p>\n<p><code class=\"language-text\">user</code> 가 <code class=\"language-text\">null</code> 이나 <code class=\"language-text\">undefined</code> 가 아니고 실제 값이 존재하는 경우엔 반드시 <code class=\"language-text\">user.address</code> 프로퍼티는 있어야합니다. 그렇지 않으면 <code class=\"language-text\">user?.address.street</code> 의 두 번째 점 연산자에서 에러가 발생합니다.</p>\n<h2>단락 평가</h2>\n<p><code class=\"language-text\">?.</code> 는 왼쪽 평가대상에 값이 없으면 즉시 평가를 멈춥니다. 참고로 이런 평가 방법을 단락 평가(short-circuit)라고 부릅니다.</p>\n<p>그렇기 때문에 함수 호출을 비롯한 <code class=\"language-text\">?.</code> 오른쪽에 있는 부가 동작은 <code class=\"language-text\">?.</code> 의 평가가 멈췄을 때 더는 일어나지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\nuser<span class=\"token operator\">?.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 아무 일도 일어나지 않습니다.</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0, x는 증가하지 않습니다.</span></code></pre></div>\n<h2>?.()와 ?.[]</h2>\n<p><code class=\"language-text\">?.</code> 은 연산자가 아닙니다. <code class=\"language-text\">?.</code> 은 함수나 대괄호와 함께 동작하는 특별한 문법 구조체(syntax construct)입니다.</p>\n<p>함수 관련 예시와 함께 존재 여부가 확실치 않은 함수를 호출할 때 <code class=\"language-text\">?.()</code> 를 어떻게 쓸 수 있는지 알아봅시다.</p>\n<p>한 객체엔 메서드 <code class=\"language-text\">admin</code> 이 있지만 다른 객체엔 없는 상황입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">admin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'관리자 계정입니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> user2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nuser1<span class=\"token punctuation\">.</span>admin<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 관리자 계정입니다.</span>\nuser2<span class=\"token punctuation\">.</span>admin<span class=\"token operator\">?.</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>두 상황 모두에서 user 객체는 존재하기 때문에 <code class=\"language-text\">admin</code> 프로퍼티는 <code class=\"language-text\">.</code> 만 사용해 접근했습니다.</p>\n<p>그리고 난 후 <code class=\"language-text\">?.()</code> 를 사용해 <code class=\"language-text\">admin</code> 의 존재 여부를 확인했습니다. <code class=\"language-text\">user</code> 엔 <code class=\"language-text\">admin</code> 이 정의되어 있기 때문에 메서드가 제대로 호출되었습니다. 반면 <code class=\"language-text\">user</code> 엔 <code class=\"language-text\">admin</code> 이 정의되어 있지 않았음에도 불구하고 메서드를 호출하면 에러 없이 그냥 평가가 멈추는 것을 확인할 수 있습니다.</p>\n<p><code class=\"language-text\">.</code> 대신 대괄호 <code class=\"language-text\">[]</code> 를 사용해 객체 프로퍼티에 접근하는 경우엔 <code class=\"language-text\">?.[]</code> 를 사용할 수도 있습니다. 위 예시와 마찬가지로 <code class=\"language-text\">?.[]</code> 를 사용하면 객체 존재 여부가 확실치 않은 경우에도 안전하게 프로퍼티를 읽을 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">firstName</span><span class=\"token operator\">:</span> <span class=\"token string\">'Violet'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> user2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// user2는 권한이 없는 사용자라고 가정해봅시다.</span>\n\n<span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> <span class=\"token string\">'firstName'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user1<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Violet</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>user2<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> user1<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">?.</span>something<span class=\"token operator\">?.</span>not<span class=\"token operator\">?.</span>existing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<p><code class=\"language-text\">?.</code> 은 <code class=\"language-text\">delete</code> 와 조합해 사용할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">delete</span> user<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// user가 존재하면 user.name을 삭제합니다.</span></code></pre></div>\n<p>출처 : <a href=\"https://ko.javascript.info/optional-chaining\">https://ko.javascript.info/optional-chaining</a></p>","frontmatter":{"title":"Javascript 옵셔널 체이닝","date":"January 12, 2022","update":"January 12, 2022","tags":["Javascript"],"series":null},"fields":{"slug":"/Javascript-옵셔널-체이닝/","readingTime":{"minutes":6.48}}},"seriesList":{"edges":[{"node":{"id":"b6578fe8-f337-5d11-8514-da61bd46e110","fields":{"slug":"/Nuxt-Datepicker-적용하기/"},"frontmatter":{"title":"[Nuxt.js] Datepicker UI 적용하기"}}},{"node":{"id":"01141e74-a4d1-5bf5-88a0-56be4fc92a28","fields":{"slug":"/Nuxt3-Service-배포-삽질-기록/"},"frontmatter":{"title":"[Nuxt.js] Datepicker UI 적용하기"}}},{"node":{"id":"df158759-b65d-5ec8-9d3b-dcbd394961a7","fields":{"slug":"/Javascript-어림수-구하기/"},"frontmatter":{"title":"Javascript 어림수 구하기"}}},{"node":{"id":"3383351a-adc2-5c17-9896-3e5a8851d927","fields":{"slug":"/Javascript-nullish-병합-연산자/"},"frontmatter":{"title":"Javascript nullish 병합 연산자"}}},{"node":{"id":"7d5747a4-ce74-5abe-9d37-984d8d8a4976","fields":{"slug":"/Javascript-옵셔널-체이닝/"},"frontmatter":{"title":"Javascript 옵셔널 체이닝"}}},{"node":{"id":"5f9d9d87-122d-55bf-a698-38f13c4e038d","fields":{"slug":"/React에-CSS-적용하기/"},"frontmatter":{"title":"React에 CSS 적용하기"}}},{"node":{"id":"0b36fb82-188a-520d-a43b-7c0e3a0c7eee","fields":{"slug":"/반응형이미지를-구현하는-두가지-방법/"},"frontmatter":{"title":"반응형이미지를 구현하는 두가지 방법"}}},{"node":{"id":"b6b8bdda-84c2-5304-8007-f8001110ec52","fields":{"slug":"/웹사이트-웹접근성-진단하기/"},"frontmatter":{"title":"웹사이트 웹접근성 진단하기"}}},{"node":{"id":"113a8650-e749-5d9a-bd9d-1cbbf2dc3951","fields":{"slug":"/Next-CSS-Transform/"},"frontmatter":{"title":"Next CSS Transform"}}},{"node":{"id":"22d66f73-accd-503d-9d27-be8addeb6eff","fields":{"slug":"/vue3-프로젝트에-vue-i18n-적용하기/"},"frontmatter":{"title":"vue3 프로젝트에 vue-i18n 적용하기"}}},{"node":{"id":"8a7d7935-f24b-5a98-9b68-3873e51668b5","fields":{"slug":"/vue3-본인확인서비스-붙이기/"},"frontmatter":{"title":"vue3 본인확인서비스 붙이기"}}},{"node":{"id":"efbb93f9-6dd7-5ea7-9674-cd559d22bdc4","fields":{"slug":"/ios에서-mp4파일이-재생이-안될때/"},"frontmatter":{"title":"Nuxt3 Service 배포 삽질 기록 (feat. pm2)"}}}]},"previous":{"fields":{"slug":"/Javascript-nullish-병합-연산자/"},"frontmatter":{"title":"Javascript nullish 병합 연산자"}},"next":{"fields":{"slug":"/React에-CSS-적용하기/"},"frontmatter":{"title":"React에 CSS 적용하기"}}},"pageContext":{"id":"7d5747a4-ce74-5abe-9d37-984d8d8a4976","series":null,"previousPostId":"3383351a-adc2-5c17-9896-3e5a8851d927","nextPostId":"5f9d9d87-122d-55bf-a698-38f13c4e038d"}},"staticQueryHashes":[]}