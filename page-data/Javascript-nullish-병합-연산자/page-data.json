{"componentChunkName":"component---src-templates-post-jsx","path":"/Javascript-nullish-병합-연산자/","result":{"data":{"site":{"siteMetadata":{"title":"SIMPLIZM"}},"markdownRemark":{"id":"b961a9f1-f786-5207-99c7-bab9d60efdd0","excerpt":"nullish 병합 연산자 (nullish coalescing operator) 를 사용하면 짧은 문법으로 여러 피연산자 중 그 값이 '확정되어있는' 변수를 찾을 수 있습니다. 의 평가 결과는 다음과 같습니다. 가 도 아니고 도 아니면  그 외의 경우는  nullish 병합 연산자 없이 와 동일한 동작을 하는 코드를 작성하면 다음과 같습니다. 비교 연산자…","html":"<p>nullish 병합 연산자 (nullish coalescing operator) <code class=\"language-text\">??</code>를 사용하면 짧은 문법으로 여러 피연산자 중 그 값이 '확정되어있는' 변수를 찾을 수 있습니다.</p>\n<p><code class=\"language-text\">a ?? b</code>의 평가 결과는 다음과 같습니다.</p>\n<ul>\n<li><code class=\"language-text\">a</code>가 <code class=\"language-text\">null</code>도 아니고 <code class=\"language-text\">undefined</code>도 아니면 <code class=\"language-text\">a</code></li>\n<li>그 외의 경우는 <code class=\"language-text\">b</code></li>\n</ul>\n<p>nullish 병합 연산자 <code class=\"language-text\">??</code>없이 <code class=\"language-text\">x = a ?? b</code>와 동일한 동작을 하는 코드를 작성하면 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> a <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> b<span class=\"token punctuation\">;</span></code></pre></div>\n<p>비교 연산자와 논리 연산자만으로 nullish 병합 연산자와 같은 기능을 하는 코드를 작성하니 코드 길이가 길어지네요.</p>\n<p>또 다른 예시를 살펴봅시다. <code class=\"language-text\">firstName</code>, <code class=\"language-text\">lastName</code>, <code class=\"language-text\">nickName</code>이란 변수에 사용자 이름이나 별명을 저장하는데, 사용자가 아무런 정보도 입력하지 않는 케이스도 허용한다고 해보겠습니다.</p>\n<p>화면엔 세 변수 중 실제 값이 있는 변수의 값을 출력하는데, 세 변수 모두 값이 없다면 '익명의 사용자'가 출력되도록 해보죠.</p>\n<p>이럴 때 nullish 병합 연산자 <code class=\"language-text\">??</code>를 사용하면 값이 정해진 변수를 간편하게 찾아낼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> firstName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> lastName <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> nickName <span class=\"token operator\">=</span> <span class=\"token string\">'바이올렛'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>firstName <span class=\"token operator\">??</span> lastName <span class=\"token operator\">??</span> nickName <span class=\"token operator\">??</span> <span class=\"token string\">'익명의 사용자'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>'??'와 '||'의 차이</h2>\n<p>nullish 병합 연산자는 OR 연산자 <code class=\"language-text\">||</code>와 상당히 유사해 보입니다. 실제로 위 예시에서 <code class=\"language-text\">??</code>를 <code class=\"language-text\">||</code>로 바꿔도 그 결과는 동일하기까지 하죠.</p>\n<p>그런데 두 연산자 사이에는 중요한 차이점이 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">||</code>는 첫 번째 truthy 값을 반환합니다.</li>\n<li><code class=\"language-text\">??</code>는 첫 번째 정의된(defined) 값을 반환합니다.</li>\n</ul>\n<p><code class=\"language-text\">null</code>과 <code class=\"language-text\">undefined</code>, 숫자 <code class=\"language-text\">0</code>을 구분 지어 다뤄야 할 때 이 차이점은 매우 중요한 역할을 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">height <span class=\"token operator\">=</span> height <span class=\"token operator\">??</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">height</code>에 값이 정의되지 않은경우 <code class=\"language-text\">height</code>엔 <code class=\"language-text\">100</code>이 할당됩니다.\n이제 <code class=\"language-text\">??</code>와 <code class=\"language-text\">||</code>을 비교해봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> height <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">||</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 100</span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">??</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<p><code class=\"language-text\">height || 100</code>은 <code class=\"language-text\">height</code>에 <code class=\"language-text\">0</code>을 할당했지만 <code class=\"language-text\">0</code>을 falsy 한 값으로 취급했기 때문에 <code class=\"language-text\">null</code>이나 <code class=\"language-text\">undefined</code>를 할당한 것과 동일하게 처리합니다. 따라서 <code class=\"language-text\">height || 100</code>의 평가 결과는 <code class=\"language-text\">100</code>입니다.</p>\n<p>반면 <code class=\"language-text\">height ?? 0</code>의 평가 결과는 <code class=\"language-text\">height</code>가 정확하게 <code class=\"language-text\">null</code>이나 <code class=\"language-text\">undefined</code>일 경우에만 <code class=\"language-text\">100</code>이 됩니다. 예시에선 <code class=\"language-text\">height</code>에 <code class=\"language-text\">0</code>이라는 값을 할당했기 때문에 얼럿창엔 <code class=\"language-text\">0</code>이 출력됩니다.</p>\n<p>이런 특징 때문에 높이처럼 <code class=\"language-text\">0</code>이 할당될 수 있는 변수를 사용해 기능을 개발할 땐 <code class=\"language-text\">||</code>보다 <code class=\"language-text\">??</code>가 적합합니다.</p>\n<h2>연산자 우선순위</h2>\n<p><code class=\"language-text\">??</code>의 연산자 우선순위는 <code class=\"language-text\">5</code>로 꽤 낮습니다.</p>\n<p>따라서 <code class=\"language-text\">??</code>는 <code class=\"language-text\">=</code>와 <code class=\"language-text\">?</code>보다는 먼저, 대부분의 연산자보다는 나중에 평가됩니다.</p>\n<p>그렇기 때문에 복잡한 표현식 안에서 <code class=\"language-text\">??</code>를 사용해 값을 하나 선택할 땐 괄호를 추가하는게 좋습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> height <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> width <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> area <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">??</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">??</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5000</span></code></pre></div>\n<p><code class=\"language-text\">??</code>엔 자바스크립트 언어에서 규정한 또 다른 제약사항이 있습니다.</p>\n<p>안정성 관련 이슈 때문에 <code class=\"language-text\">??</code>는 <code class=\"language-text\">&amp;&amp;</code>나 <code class=\"language-text\">||</code>와 함께 사용하지 못합니다.</p>\n<p>아래 예시를 실행하면 문법 에러가 발생합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">2</span> <span class=\"token operator\">??</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SyntaxError: Unexpected token '??'</span></code></pre></div>\n<p>이 제약에 대해선 아직 논쟁이 많긴 하지만 사람들이 <code class=\"language-text\">||</code>를 <code class=\"language-text\">??</code>로 바꾸기 시작하면서 만드는 실수를 방지하고자 명세서에 제약이 추가된 상황입니다.</p>\n<p>제약을 피하려면 괄호를 사용해주세요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>출처 : <a href=\"https://ko.javascript.info/nullish-coalescing-operator\">https://ko.javascript.info/nullish-coalescing-operator</a></p>","frontmatter":{"title":"Javascript nullish 병합 연산자","date":"January 11, 2022","update":"January 11, 2022","tags":["Javascript"],"series":null},"fields":{"slug":"/Javascript-nullish-병합-연산자/","readingTime":{"minutes":4.945}}},"seriesList":{"edges":[{"node":{"id":"7e36a7b0-59a9-583b-a479-058fd3f95437","fields":{"slug":"/Nuxt-Datepicker-적용하기/"},"frontmatter":{"title":"[Nuxt.js] Datepicker UI 적용하기"}}},{"node":{"id":"766dfe73-729b-5f64-9279-24e69a4ca7c5","fields":{"slug":"/Javascript-어림수-구하기/"},"frontmatter":{"title":"Javascript 어림수 구하기"}}},{"node":{"id":"b961a9f1-f786-5207-99c7-bab9d60efdd0","fields":{"slug":"/Javascript-nullish-병합-연산자/"},"frontmatter":{"title":"Javascript nullish 병합 연산자"}}},{"node":{"id":"3a842f60-cc12-550c-9df0-6e054496a78a","fields":{"slug":"/Javascript-옵셔널-체이닝/"},"frontmatter":{"title":"Javascript 옵셔널 체이닝"}}},{"node":{"id":"83702ce5-2895-5754-962d-e13ea2ed53fb","fields":{"slug":"/React에-CSS-적용하기/"},"frontmatter":{"title":"React에 CSS 적용하기"}}},{"node":{"id":"2e7dae26-056c-5f77-8438-8c54ad8be00d","fields":{"slug":"/반응형이미지를-구현하는-두가지-방법/"},"frontmatter":{"title":"반응형이미지를 구현하는 두가지 방법"}}},{"node":{"id":"7667bfa8-92fb-50dc-b53a-f64a29e26dce","fields":{"slug":"/웹사이트-웹접근성-진단하기/"},"frontmatter":{"title":"웹사이트 웹접근성 진단하기"}}},{"node":{"id":"59700b95-d1a5-5be4-81e5-c0c5e46af505","fields":{"slug":"/Next-CSS-Transform/"},"frontmatter":{"title":"Next CSS Transform"}}},{"node":{"id":"ba8c7a67-0bd6-5c59-b591-a055f51191f2","fields":{"slug":"/vue3-프로젝트에-vue-i18n-적용하기/"},"frontmatter":{"title":"vue3 프로젝트에 vue-i18n 적용하기"}}},{"node":{"id":"88fedda1-7813-5c32-b4af-fa15293dcfa7","fields":{"slug":"/vue3-본인확인서비스-붙이기/"},"frontmatter":{"title":"vue3 본인확인서비스 붙이기"}}}]},"previous":{"fields":{"slug":"/Javascript-어림수-구하기/"},"frontmatter":{"title":"Javascript 어림수 구하기"}},"next":{"fields":{"slug":"/Javascript-옵셔널-체이닝/"},"frontmatter":{"title":"Javascript 옵셔널 체이닝"}}},"pageContext":{"id":"b961a9f1-f786-5207-99c7-bab9d60efdd0","series":null,"previousPostId":"766dfe73-729b-5f64-9279-24e69a4ca7c5","nextPostId":"3a842f60-cc12-550c-9df0-6e054496a78a"}},"staticQueryHashes":[]}